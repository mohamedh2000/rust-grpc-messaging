/**
 * @fileoverview gRPC-Web generated client stub for chat
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v5.28.2
// source: chat.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');

const proto = {};
proto.chat = require('./chat_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.chat.ChatClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.chat.ChatPromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.RoomRequest,
 *   !proto.chat.Empty>}
 */
const methodDescriptor_Chat_RequestRoom = new grpc.web.MethodDescriptor(
  '/chat.Chat/RequestRoom',
  grpc.web.MethodType.UNARY,
  proto.chat.RoomRequest,
  proto.chat.Empty,
  /**
   * @param {!proto.chat.RoomRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.Empty.deserializeBinary
);


/**
 * @param {!proto.chat.RoomRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatClient.prototype.requestRoom =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.Chat/RequestRoom',
      request,
      metadata || {},
      methodDescriptor_Chat_RequestRoom,
      callback);
};


/**
 * @param {!proto.chat.RoomRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.Empty>}
 *     Promise that resolves to the response
 */
proto.chat.ChatPromiseClient.prototype.requestRoom =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.Chat/RequestRoom',
      request,
      metadata || {},
      methodDescriptor_Chat_RequestRoom);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.FriendRequest,
 *   !proto.chat.Empty>}
 */
const methodDescriptor_Chat_SendFriendRequest = new grpc.web.MethodDescriptor(
  '/chat.Chat/SendFriendRequest',
  grpc.web.MethodType.UNARY,
  proto.chat.FriendRequest,
  proto.chat.Empty,
  /**
   * @param {!proto.chat.FriendRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.Empty.deserializeBinary
);


/**
 * @param {!proto.chat.FriendRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatClient.prototype.sendFriendRequest =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.Chat/SendFriendRequest',
      request,
      metadata || {},
      methodDescriptor_Chat_SendFriendRequest,
      callback);
};


/**
 * @param {!proto.chat.FriendRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.Empty>}
 *     Promise that resolves to the response
 */
proto.chat.ChatPromiseClient.prototype.sendFriendRequest =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.Chat/SendFriendRequest',
      request,
      metadata || {},
      methodDescriptor_Chat_SendFriendRequest);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.FriendResponse,
 *   !proto.chat.Empty>}
 */
const methodDescriptor_Chat_RespondFriendRequest = new grpc.web.MethodDescriptor(
  '/chat.Chat/RespondFriendRequest',
  grpc.web.MethodType.UNARY,
  proto.chat.FriendResponse,
  proto.chat.Empty,
  /**
   * @param {!proto.chat.FriendResponse} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.Empty.deserializeBinary
);


/**
 * @param {!proto.chat.FriendResponse} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatClient.prototype.respondFriendRequest =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.Chat/RespondFriendRequest',
      request,
      metadata || {},
      methodDescriptor_Chat_RespondFriendRequest,
      callback);
};


/**
 * @param {!proto.chat.FriendResponse} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.Empty>}
 *     Promise that resolves to the response
 */
proto.chat.ChatPromiseClient.prototype.respondFriendRequest =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.Chat/RespondFriendRequest',
      request,
      metadata || {},
      methodDescriptor_Chat_RespondFriendRequest);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.User,
 *   !proto.chat.UserInfoResponse>}
 */
const methodDescriptor_Chat_UserInfo = new grpc.web.MethodDescriptor(
  '/chat.Chat/UserInfo',
  grpc.web.MethodType.UNARY,
  proto.chat.User,
  proto.chat.UserInfoResponse,
  /**
   * @param {!proto.chat.User} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.UserInfoResponse.deserializeBinary
);


/**
 * @param {!proto.chat.User} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.UserInfoResponse)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.UserInfoResponse>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatClient.prototype.userInfo =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.Chat/UserInfo',
      request,
      metadata || {},
      methodDescriptor_Chat_UserInfo,
      callback);
};


/**
 * @param {!proto.chat.User} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.UserInfoResponse>}
 *     Promise that resolves to the response
 */
proto.chat.ChatPromiseClient.prototype.userInfo =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.Chat/UserInfo',
      request,
      metadata || {},
      methodDescriptor_Chat_UserInfo);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.UserPfpRequest,
 *   !proto.chat.Empty>}
 */
const methodDescriptor_Chat_SetUserPfp = new grpc.web.MethodDescriptor(
  '/chat.Chat/SetUserPfp',
  grpc.web.MethodType.UNARY,
  proto.chat.UserPfpRequest,
  proto.chat.Empty,
  /**
   * @param {!proto.chat.UserPfpRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.Empty.deserializeBinary
);


/**
 * @param {!proto.chat.UserPfpRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.Empty)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.Empty>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatClient.prototype.setUserPfp =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.Chat/SetUserPfp',
      request,
      metadata || {},
      methodDescriptor_Chat_SetUserPfp,
      callback);
};


/**
 * @param {!proto.chat.UserPfpRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.Empty>}
 *     Promise that resolves to the response
 */
proto.chat.ChatPromiseClient.prototype.setUserPfp =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.Chat/SetUserPfp',
      request,
      metadata || {},
      methodDescriptor_Chat_SetUserPfp);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.chat.Roomid,
 *   !proto.chat.Messages>}
 */
const methodDescriptor_Chat_GetMessages = new grpc.web.MethodDescriptor(
  '/chat.Chat/GetMessages',
  grpc.web.MethodType.UNARY,
  proto.chat.Roomid,
  proto.chat.Messages,
  /**
   * @param {!proto.chat.Roomid} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  proto.chat.Messages.deserializeBinary
);


/**
 * @param {!proto.chat.Roomid} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.chat.Messages)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.chat.Messages>|undefined}
 *     The XHR Node Readable Stream
 */
proto.chat.ChatClient.prototype.getMessages =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/chat.Chat/GetMessages',
      request,
      metadata || {},
      methodDescriptor_Chat_GetMessages,
      callback);
};


/**
 * @param {!proto.chat.Roomid} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.chat.Messages>}
 *     Promise that resolves to the response
 */
proto.chat.ChatPromiseClient.prototype.getMessages =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/chat.Chat/GetMessages',
      request,
      metadata || {},
      methodDescriptor_Chat_GetMessages);
};


module.exports = proto.chat;

