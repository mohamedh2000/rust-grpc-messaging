{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.InternalChannel = void 0;\nconst channel_credentials_1 = require(\"./channel-credentials\");\nconst resolving_load_balancer_1 = require(\"./resolving-load-balancer\");\nconst subchannel_pool_1 = require(\"./subchannel-pool\");\nconst picker_1 = require(\"./picker\");\nconst metadata_1 = require(\"./metadata\");\nconst constants_1 = require(\"./constants\");\nconst filter_stack_1 = require(\"./filter-stack\");\nconst compression_filter_1 = require(\"./compression-filter\");\nconst resolver_1 = require(\"./resolver\");\nconst logging_1 = require(\"./logging\");\nconst http_proxy_1 = require(\"./http_proxy\");\nconst uri_parser_1 = require(\"./uri-parser\");\nconst connectivity_state_1 = require(\"./connectivity-state\");\nconst channelz_1 = require(\"./channelz\");\nconst load_balancing_call_1 = require(\"./load-balancing-call\");\nconst deadline_1 = require(\"./deadline\");\nconst resolving_call_1 = require(\"./resolving-call\");\nconst call_number_1 = require(\"./call-number\");\nconst control_plane_status_1 = require(\"./control-plane-status\");\nconst retrying_call_1 = require(\"./retrying-call\");\nconst subchannel_interface_1 = require(\"./subchannel-interface\");\n/**\n * See https://nodejs.org/api/timers.html#timers_setinterval_callback_delay_args\n */\nconst MAX_TIMEOUT_TIME = 2147483647;\nconst MIN_IDLE_TIMEOUT_MS = 1000;\n// 30 minutes\nconst DEFAULT_IDLE_TIMEOUT_MS = 30 * 60 * 1000;\nconst RETRY_THROTTLER_MAP = new Map();\nconst DEFAULT_RETRY_BUFFER_SIZE_BYTES = 1 << 24; // 16 MB\nconst DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES = 1 << 20; // 1 MB\nclass ChannelSubchannelWrapper extends subchannel_interface_1.BaseSubchannelWrapper {\n  constructor(childSubchannel, channel) {\n    super(childSubchannel);\n    this.channel = channel;\n    this.refCount = 0;\n    this.subchannelStateListener = (subchannel, previousState, newState, keepaliveTime) => {\n      channel.throttleKeepalive(keepaliveTime);\n    };\n    childSubchannel.addConnectivityStateListener(this.subchannelStateListener);\n  }\n  ref() {\n    this.child.ref();\n    this.refCount += 1;\n  }\n  unref() {\n    this.child.unref();\n    this.refCount -= 1;\n    if (this.refCount <= 0) {\n      this.child.removeConnectivityStateListener(this.subchannelStateListener);\n      this.channel.removeWrappedSubchannel(this);\n    }\n  }\n}\nclass ShutdownPicker {\n  pick(pickArgs) {\n    return {\n      pickResultType: picker_1.PickResultType.DROP,\n      status: {\n        code: constants_1.Status.UNAVAILABLE,\n        details: 'Channel closed before call started',\n        metadata: new metadata_1.Metadata()\n      },\n      subchannel: null,\n      onCallStarted: null,\n      onCallEnded: null\n    };\n  }\n}\nclass InternalChannel {\n  constructor(target, credentials, options) {\n    var _a, _b, _c, _d, _e, _f, _g, _h;\n    this.credentials = credentials;\n    this.options = options;\n    this.connectivityState = connectivity_state_1.ConnectivityState.IDLE;\n    this.currentPicker = new picker_1.UnavailablePicker();\n    /**\n     * Calls queued up to get a call config. Should only be populated before the\n     * first time the resolver returns a result, which includes the ConfigSelector.\n     */\n    this.configSelectionQueue = [];\n    this.pickQueue = [];\n    this.connectivityStateWatchers = [];\n    this.configSelector = null;\n    /**\n     * This is the error from the name resolver if it failed most recently. It\n     * is only used to end calls that start while there is no config selector\n     * and the name resolver is in backoff, so it should be nulled if\n     * configSelector becomes set or the channel state becomes anything other\n     * than TRANSIENT_FAILURE.\n     */\n    this.currentResolutionError = null;\n    this.wrappedSubchannels = new Set();\n    this.callCount = 0;\n    this.idleTimer = null;\n    // Channelz info\n    this.channelzEnabled = true;\n    this.callTracker = new channelz_1.ChannelzCallTracker();\n    this.childrenTracker = new channelz_1.ChannelzChildrenTracker();\n    /**\n     * Randomly generated ID to be passed to the config selector, for use by\n     * ring_hash in xDS. An integer distributed approximately uniformly between\n     * 0 and MAX_SAFE_INTEGER.\n     */\n    this.randomChannelId = Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n    if (typeof target !== 'string') {\n      throw new TypeError('Channel target must be a string');\n    }\n    if (!(credentials instanceof channel_credentials_1.ChannelCredentials)) {\n      throw new TypeError('Channel credentials must be a ChannelCredentials object');\n    }\n    if (options) {\n      if (typeof options !== 'object') {\n        throw new TypeError('Channel options must be an object');\n      }\n    }\n    this.originalTarget = target;\n    const originalTargetUri = (0, uri_parser_1.parseUri)(target);\n    if (originalTargetUri === null) {\n      throw new Error(`Could not parse target name \"${target}\"`);\n    }\n    /* This ensures that the target has a scheme that is registered with the\n     * resolver */\n    const defaultSchemeMapResult = (0, resolver_1.mapUriDefaultScheme)(originalTargetUri);\n    if (defaultSchemeMapResult === null) {\n      throw new Error(`Could not find a default scheme for target name \"${target}\"`);\n    }\n    this.callRefTimer = setInterval(() => {}, MAX_TIMEOUT_TIME);\n    (_b = (_a = this.callRefTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    if (this.options['grpc.enable_channelz'] === 0) {\n      this.channelzEnabled = false;\n    }\n    this.channelzTrace = new channelz_1.ChannelzTrace();\n    this.channelzRef = (0, channelz_1.registerChannelzChannel)(target, () => this.getChannelzInfo(), this.channelzEnabled);\n    if (this.channelzEnabled) {\n      this.channelzTrace.addTrace('CT_INFO', 'Channel created');\n    }\n    if (this.options['grpc.default_authority']) {\n      this.defaultAuthority = this.options['grpc.default_authority'];\n    } else {\n      this.defaultAuthority = (0, resolver_1.getDefaultAuthority)(defaultSchemeMapResult);\n    }\n    const proxyMapResult = (0, http_proxy_1.mapProxyName)(defaultSchemeMapResult, options);\n    this.target = proxyMapResult.target;\n    this.options = Object.assign({}, this.options, proxyMapResult.extraOptions);\n    /* The global boolean parameter to getSubchannelPool has the inverse meaning to what\n     * the grpc.use_local_subchannel_pool channel option means. */\n    this.subchannelPool = (0, subchannel_pool_1.getSubchannelPool)(((_c = options['grpc.use_local_subchannel_pool']) !== null && _c !== void 0 ? _c : 0) === 0);\n    this.retryBufferTracker = new retrying_call_1.MessageBufferTracker((_d = options['grpc.retry_buffer_size']) !== null && _d !== void 0 ? _d : DEFAULT_RETRY_BUFFER_SIZE_BYTES, (_e = options['grpc.per_rpc_retry_buffer_size']) !== null && _e !== void 0 ? _e : DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES);\n    this.keepaliveTime = (_f = options['grpc.keepalive_time_ms']) !== null && _f !== void 0 ? _f : -1;\n    this.idleTimeoutMs = Math.max((_g = options['grpc.client_idle_timeout_ms']) !== null && _g !== void 0 ? _g : DEFAULT_IDLE_TIMEOUT_MS, MIN_IDLE_TIMEOUT_MS);\n    const channelControlHelper = {\n      createSubchannel: (subchannelAddress, subchannelArgs) => {\n        const subchannel = this.subchannelPool.getOrCreateSubchannel(this.target, subchannelAddress, Object.assign({}, this.options, subchannelArgs), this.credentials);\n        subchannel.throttleKeepalive(this.keepaliveTime);\n        if (this.channelzEnabled) {\n          this.channelzTrace.addTrace('CT_INFO', 'Created subchannel or used existing subchannel', subchannel.getChannelzRef());\n        }\n        const wrappedSubchannel = new ChannelSubchannelWrapper(subchannel, this);\n        this.wrappedSubchannels.add(wrappedSubchannel);\n        return wrappedSubchannel;\n      },\n      updateState: (connectivityState, picker) => {\n        this.currentPicker = picker;\n        const queueCopy = this.pickQueue.slice();\n        this.pickQueue = [];\n        if (queueCopy.length > 0) {\n          this.callRefTimerUnref();\n        }\n        for (const call of queueCopy) {\n          call.doPick();\n        }\n        this.updateState(connectivityState);\n      },\n      requestReresolution: () => {\n        // This should never be called.\n        throw new Error('Resolving load balancer should never call requestReresolution');\n      },\n      addChannelzChild: child => {\n        if (this.channelzEnabled) {\n          this.childrenTracker.refChild(child);\n        }\n      },\n      removeChannelzChild: child => {\n        if (this.channelzEnabled) {\n          this.childrenTracker.unrefChild(child);\n        }\n      }\n    };\n    this.resolvingLoadBalancer = new resolving_load_balancer_1.ResolvingLoadBalancer(this.target, channelControlHelper, options, (serviceConfig, configSelector) => {\n      if (serviceConfig.retryThrottling) {\n        RETRY_THROTTLER_MAP.set(this.getTarget(), new retrying_call_1.RetryThrottler(serviceConfig.retryThrottling.maxTokens, serviceConfig.retryThrottling.tokenRatio, RETRY_THROTTLER_MAP.get(this.getTarget())));\n      } else {\n        RETRY_THROTTLER_MAP.delete(this.getTarget());\n      }\n      if (this.channelzEnabled) {\n        this.channelzTrace.addTrace('CT_INFO', 'Address resolution succeeded');\n      }\n      this.configSelector = configSelector;\n      this.currentResolutionError = null;\n      /* We process the queue asynchronously to ensure that the corresponding\n       * load balancer update has completed. */\n      process.nextTick(() => {\n        const localQueue = this.configSelectionQueue;\n        this.configSelectionQueue = [];\n        if (localQueue.length > 0) {\n          this.callRefTimerUnref();\n        }\n        for (const call of localQueue) {\n          call.getConfig();\n        }\n      });\n    }, status => {\n      if (this.channelzEnabled) {\n        this.channelzTrace.addTrace('CT_WARNING', 'Address resolution failed with code ' + status.code + ' and details \"' + status.details + '\"');\n      }\n      if (this.configSelectionQueue.length > 0) {\n        this.trace('Name resolution failed with calls queued for config selection');\n      }\n      if (this.configSelector === null) {\n        this.currentResolutionError = Object.assign(Object.assign({}, (0, control_plane_status_1.restrictControlPlaneStatusCode)(status.code, status.details)), {\n          metadata: status.metadata\n        });\n      }\n      const localQueue = this.configSelectionQueue;\n      this.configSelectionQueue = [];\n      if (localQueue.length > 0) {\n        this.callRefTimerUnref();\n      }\n      for (const call of localQueue) {\n        call.reportResolverError(status);\n      }\n    });\n    this.filterStackFactory = new filter_stack_1.FilterStackFactory([new compression_filter_1.CompressionFilterFactory(this, this.options)]);\n    this.trace('Channel constructed with options ' + JSON.stringify(options, undefined, 2));\n    const error = new Error();\n    if ((0, logging_1.isTracerEnabled)('channel_stacktrace')) {\n      (0, logging_1.trace)(constants_1.LogVerbosity.DEBUG, 'channel_stacktrace', '(' + this.channelzRef.id + ') ' + 'Channel constructed \\n' + ((_h = error.stack) === null || _h === void 0 ? void 0 : _h.substring(error.stack.indexOf('\\n') + 1)));\n    }\n    this.lastActivityTimestamp = new Date();\n  }\n  getChannelzInfo() {\n    return {\n      target: this.originalTarget,\n      state: this.connectivityState,\n      trace: this.channelzTrace,\n      callTracker: this.callTracker,\n      children: this.childrenTracker.getChildLists()\n    };\n  }\n  trace(text, verbosityOverride) {\n    (0, logging_1.trace)(verbosityOverride !== null && verbosityOverride !== void 0 ? verbosityOverride : constants_1.LogVerbosity.DEBUG, 'channel', '(' + this.channelzRef.id + ') ' + (0, uri_parser_1.uriToString)(this.target) + ' ' + text);\n  }\n  callRefTimerRef() {\n    var _a, _b, _c, _d;\n    // If the hasRef function does not exist, always run the code\n    if (!((_b = (_a = this.callRefTimer).hasRef) === null || _b === void 0 ? void 0 : _b.call(_a))) {\n      this.trace('callRefTimer.ref | configSelectionQueue.length=' + this.configSelectionQueue.length + ' pickQueue.length=' + this.pickQueue.length);\n      (_d = (_c = this.callRefTimer).ref) === null || _d === void 0 ? void 0 : _d.call(_c);\n    }\n  }\n  callRefTimerUnref() {\n    var _a, _b;\n    // If the hasRef function does not exist, always run the code\n    if (!this.callRefTimer.hasRef || this.callRefTimer.hasRef()) {\n      this.trace('callRefTimer.unref | configSelectionQueue.length=' + this.configSelectionQueue.length + ' pickQueue.length=' + this.pickQueue.length);\n      (_b = (_a = this.callRefTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n    }\n  }\n  removeConnectivityStateWatcher(watcherObject) {\n    const watcherIndex = this.connectivityStateWatchers.findIndex(value => value === watcherObject);\n    if (watcherIndex >= 0) {\n      this.connectivityStateWatchers.splice(watcherIndex, 1);\n    }\n  }\n  updateState(newState) {\n    (0, logging_1.trace)(constants_1.LogVerbosity.DEBUG, 'connectivity_state', '(' + this.channelzRef.id + ') ' + (0, uri_parser_1.uriToString)(this.target) + ' ' + connectivity_state_1.ConnectivityState[this.connectivityState] + ' -> ' + connectivity_state_1.ConnectivityState[newState]);\n    if (this.channelzEnabled) {\n      this.channelzTrace.addTrace('CT_INFO', 'Connectivity state change to ' + connectivity_state_1.ConnectivityState[newState]);\n    }\n    this.connectivityState = newState;\n    const watchersCopy = this.connectivityStateWatchers.slice();\n    for (const watcherObject of watchersCopy) {\n      if (newState !== watcherObject.currentState) {\n        if (watcherObject.timer) {\n          clearTimeout(watcherObject.timer);\n        }\n        this.removeConnectivityStateWatcher(watcherObject);\n        watcherObject.callback();\n      }\n    }\n    if (newState !== connectivity_state_1.ConnectivityState.TRANSIENT_FAILURE) {\n      this.currentResolutionError = null;\n    }\n  }\n  throttleKeepalive(newKeepaliveTime) {\n    if (newKeepaliveTime > this.keepaliveTime) {\n      this.keepaliveTime = newKeepaliveTime;\n      for (const wrappedSubchannel of this.wrappedSubchannels) {\n        wrappedSubchannel.throttleKeepalive(newKeepaliveTime);\n      }\n    }\n  }\n  removeWrappedSubchannel(wrappedSubchannel) {\n    this.wrappedSubchannels.delete(wrappedSubchannel);\n  }\n  doPick(metadata, extraPickInfo) {\n    return this.currentPicker.pick({\n      metadata: metadata,\n      extraPickInfo: extraPickInfo\n    });\n  }\n  queueCallForPick(call) {\n    this.pickQueue.push(call);\n    this.callRefTimerRef();\n  }\n  getConfig(method, metadata) {\n    if (this.connectivityState !== connectivity_state_1.ConnectivityState.SHUTDOWN) {\n      this.resolvingLoadBalancer.exitIdle();\n    }\n    if (this.configSelector) {\n      return {\n        type: 'SUCCESS',\n        config: this.configSelector(method, metadata, this.randomChannelId)\n      };\n    } else {\n      if (this.currentResolutionError) {\n        return {\n          type: 'ERROR',\n          error: this.currentResolutionError\n        };\n      } else {\n        return {\n          type: 'NONE'\n        };\n      }\n    }\n  }\n  queueCallForConfig(call) {\n    this.configSelectionQueue.push(call);\n    this.callRefTimerRef();\n  }\n  enterIdle() {\n    this.resolvingLoadBalancer.destroy();\n    this.updateState(connectivity_state_1.ConnectivityState.IDLE);\n    this.currentPicker = new picker_1.QueuePicker(this.resolvingLoadBalancer);\n    if (this.idleTimer) {\n      clearTimeout(this.idleTimer);\n      this.idleTimer = null;\n    }\n  }\n  startIdleTimeout(timeoutMs) {\n    var _a, _b;\n    this.idleTimer = setTimeout(() => {\n      if (this.callCount > 0) {\n        /* If there is currently a call, the channel will not go idle for a\n         * period of at least idleTimeoutMs, so check again after that time.\n         */\n        this.startIdleTimeout(this.idleTimeoutMs);\n        return;\n      }\n      const now = new Date();\n      const timeSinceLastActivity = now.valueOf() - this.lastActivityTimestamp.valueOf();\n      if (timeSinceLastActivity >= this.idleTimeoutMs) {\n        this.trace('Idle timer triggered after ' + this.idleTimeoutMs + 'ms of inactivity');\n        this.enterIdle();\n      } else {\n        /* Whenever the timer fires with the latest activity being too recent,\n         * set the timer again for the time when the time since the last\n         * activity is equal to the timeout. This should result in the timer\n         * firing no more than once every idleTimeoutMs/2 on average. */\n        this.startIdleTimeout(this.idleTimeoutMs - timeSinceLastActivity);\n      }\n    }, timeoutMs);\n    (_b = (_a = this.idleTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n  }\n  maybeStartIdleTimer() {\n    if (this.connectivityState !== connectivity_state_1.ConnectivityState.SHUTDOWN && !this.idleTimer) {\n      this.startIdleTimeout(this.idleTimeoutMs);\n    }\n  }\n  onCallStart() {\n    if (this.channelzEnabled) {\n      this.callTracker.addCallStarted();\n    }\n    this.callCount += 1;\n  }\n  onCallEnd(status) {\n    if (this.channelzEnabled) {\n      if (status.code === constants_1.Status.OK) {\n        this.callTracker.addCallSucceeded();\n      } else {\n        this.callTracker.addCallFailed();\n      }\n    }\n    this.callCount -= 1;\n    this.lastActivityTimestamp = new Date();\n    this.maybeStartIdleTimer();\n  }\n  createLoadBalancingCall(callConfig, method, host, credentials, deadline) {\n    const callNumber = (0, call_number_1.getNextCallNumber)();\n    this.trace('createLoadBalancingCall [' + callNumber + '] method=\"' + method + '\"');\n    return new load_balancing_call_1.LoadBalancingCall(this, callConfig, method, host, credentials, deadline, callNumber);\n  }\n  createRetryingCall(callConfig, method, host, credentials, deadline) {\n    const callNumber = (0, call_number_1.getNextCallNumber)();\n    this.trace('createRetryingCall [' + callNumber + '] method=\"' + method + '\"');\n    return new retrying_call_1.RetryingCall(this, callConfig, method, host, credentials, deadline, callNumber, this.retryBufferTracker, RETRY_THROTTLER_MAP.get(this.getTarget()));\n  }\n  createInnerCall(callConfig, method, host, credentials, deadline) {\n    // Create a RetryingCall if retries are enabled\n    if (this.options['grpc.enable_retries'] === 0) {\n      return this.createLoadBalancingCall(callConfig, method, host, credentials, deadline);\n    } else {\n      return this.createRetryingCall(callConfig, method, host, credentials, deadline);\n    }\n  }\n  createResolvingCall(method, deadline, host, parentCall, propagateFlags) {\n    const callNumber = (0, call_number_1.getNextCallNumber)();\n    this.trace('createResolvingCall [' + callNumber + '] method=\"' + method + '\", deadline=' + (0, deadline_1.deadlineToString)(deadline));\n    const finalOptions = {\n      deadline: deadline,\n      flags: propagateFlags !== null && propagateFlags !== void 0 ? propagateFlags : constants_1.Propagate.DEFAULTS,\n      host: host !== null && host !== void 0 ? host : this.defaultAuthority,\n      parentCall: parentCall\n    };\n    const call = new resolving_call_1.ResolvingCall(this, method, finalOptions, this.filterStackFactory.clone(), this.credentials._getCallCredentials(), callNumber);\n    this.onCallStart();\n    call.addStatusWatcher(status => {\n      this.onCallEnd(status);\n    });\n    return call;\n  }\n  close() {\n    this.resolvingLoadBalancer.destroy();\n    this.updateState(connectivity_state_1.ConnectivityState.SHUTDOWN);\n    this.currentPicker = new ShutdownPicker();\n    for (const call of this.configSelectionQueue) {\n      call.cancelWithStatus(constants_1.Status.UNAVAILABLE, 'Channel closed before call started');\n    }\n    this.configSelectionQueue = [];\n    for (const call of this.pickQueue) {\n      call.cancelWithStatus(constants_1.Status.UNAVAILABLE, 'Channel closed before call started');\n    }\n    this.pickQueue = [];\n    clearInterval(this.callRefTimer);\n    if (this.idleTimer) {\n      clearTimeout(this.idleTimer);\n    }\n    if (this.channelzEnabled) {\n      (0, channelz_1.unregisterChannelzRef)(this.channelzRef);\n    }\n    this.subchannelPool.unrefUnusedSubchannels();\n  }\n  getTarget() {\n    return (0, uri_parser_1.uriToString)(this.target);\n  }\n  getConnectivityState(tryToConnect) {\n    const connectivityState = this.connectivityState;\n    if (tryToConnect) {\n      this.resolvingLoadBalancer.exitIdle();\n      this.lastActivityTimestamp = new Date();\n      this.maybeStartIdleTimer();\n    }\n    return connectivityState;\n  }\n  watchConnectivityState(currentState, deadline, callback) {\n    if (this.connectivityState === connectivity_state_1.ConnectivityState.SHUTDOWN) {\n      throw new Error('Channel has been shut down');\n    }\n    let timer = null;\n    if (deadline !== Infinity) {\n      const deadlineDate = deadline instanceof Date ? deadline : new Date(deadline);\n      const now = new Date();\n      if (deadline === -Infinity || deadlineDate <= now) {\n        process.nextTick(callback, new Error('Deadline passed without connectivity state change'));\n        return;\n      }\n      timer = setTimeout(() => {\n        this.removeConnectivityStateWatcher(watcherObject);\n        callback(new Error('Deadline passed without connectivity state change'));\n      }, deadlineDate.getTime() - now.getTime());\n    }\n    const watcherObject = {\n      currentState,\n      callback,\n      timer\n    };\n    this.connectivityStateWatchers.push(watcherObject);\n  }\n  /**\n   * Get the channelz reference object for this channel. The returned value is\n   * garbage if channelz is disabled for this channel.\n   * @returns\n   */\n  getChannelzRef() {\n    return this.channelzRef;\n  }\n  createCall(method, deadline, host, parentCall, propagateFlags) {\n    if (typeof method !== 'string') {\n      throw new TypeError('Channel#createCall: method must be a string');\n    }\n    if (!(typeof deadline === 'number' || deadline instanceof Date)) {\n      throw new TypeError('Channel#createCall: deadline must be a number or Date');\n    }\n    if (this.connectivityState === connectivity_state_1.ConnectivityState.SHUTDOWN) {\n      throw new Error('Channel has been shut down');\n    }\n    return this.createResolvingCall(method, deadline, host, parentCall, propagateFlags);\n  }\n  getOptions() {\n    return this.options;\n  }\n}\nexports.InternalChannel = InternalChannel;","map":{"version":3,"names":["channel_credentials_1","require","resolving_load_balancer_1","subchannel_pool_1","picker_1","metadata_1","constants_1","filter_stack_1","compression_filter_1","resolver_1","logging_1","http_proxy_1","uri_parser_1","connectivity_state_1","channelz_1","load_balancing_call_1","deadline_1","resolving_call_1","call_number_1","control_plane_status_1","retrying_call_1","subchannel_interface_1","MAX_TIMEOUT_TIME","MIN_IDLE_TIMEOUT_MS","DEFAULT_IDLE_TIMEOUT_MS","RETRY_THROTTLER_MAP","Map","DEFAULT_RETRY_BUFFER_SIZE_BYTES","DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES","ChannelSubchannelWrapper","BaseSubchannelWrapper","constructor","childSubchannel","channel","refCount","subchannelStateListener","subchannel","previousState","newState","keepaliveTime","throttleKeepalive","addConnectivityStateListener","ref","child","unref","removeConnectivityStateListener","removeWrappedSubchannel","ShutdownPicker","pick","pickArgs","pickResultType","PickResultType","DROP","status","code","Status","UNAVAILABLE","details","metadata","Metadata","onCallStarted","onCallEnded","InternalChannel","target","credentials","options","connectivityState","ConnectivityState","IDLE","currentPicker","UnavailablePicker","configSelectionQueue","pickQueue","connectivityStateWatchers","configSelector","currentResolutionError","wrappedSubchannels","Set","callCount","idleTimer","channelzEnabled","callTracker","ChannelzCallTracker","childrenTracker","ChannelzChildrenTracker","randomChannelId","Math","floor","random","Number","MAX_SAFE_INTEGER","TypeError","ChannelCredentials","originalTarget","originalTargetUri","parseUri","Error","defaultSchemeMapResult","mapUriDefaultScheme","callRefTimer","setInterval","_b","_a","call","channelzTrace","ChannelzTrace","channelzRef","registerChannelzChannel","getChannelzInfo","addTrace","defaultAuthority","getDefaultAuthority","proxyMapResult","mapProxyName","Object","assign","extraOptions","subchannelPool","getSubchannelPool","_c","retryBufferTracker","MessageBufferTracker","_d","_e","_f","idleTimeoutMs","max","_g","channelControlHelper","createSubchannel","subchannelAddress","subchannelArgs","getOrCreateSubchannel","getChannelzRef","wrappedSubchannel","add","updateState","picker","queueCopy","slice","length","callRefTimerUnref","doPick","requestReresolution","addChannelzChild","refChild","removeChannelzChild","unrefChild","resolvingLoadBalancer","ResolvingLoadBalancer","serviceConfig","retryThrottling","set","getTarget","RetryThrottler","maxTokens","tokenRatio","get","delete","process","nextTick","localQueue","getConfig","trace","restrictControlPlaneStatusCode","reportResolverError","filterStackFactory","FilterStackFactory","CompressionFilterFactory","JSON","stringify","undefined","error","isTracerEnabled","LogVerbosity","DEBUG","id","_h","stack","substring","indexOf","lastActivityTimestamp","Date","state","children","getChildLists","text","verbosityOverride","uriToString","callRefTimerRef","hasRef","removeConnectivityStateWatcher","watcherObject","watcherIndex","findIndex","value","splice","watchersCopy","currentState","timer","clearTimeout","callback","TRANSIENT_FAILURE","newKeepaliveTime","extraPickInfo","queueCallForPick","push","method","SHUTDOWN","exitIdle","type","config","queueCallForConfig","enterIdle","destroy","QueuePicker","startIdleTimeout","timeoutMs","setTimeout","now","timeSinceLastActivity","valueOf","maybeStartIdleTimer","onCallStart","addCallStarted","onCallEnd","OK","addCallSucceeded","addCallFailed","createLoadBalancingCall","callConfig","host","deadline","callNumber","getNextCallNumber","LoadBalancingCall","createRetryingCall","RetryingCall","createInnerCall","createResolvingCall","parentCall","propagateFlags","deadlineToString","finalOptions","flags","Propagate","DEFAULTS","ResolvingCall","clone","_getCallCredentials","addStatusWatcher","close","cancelWithStatus","clearInterval","unregisterChannelzRef","unrefUnusedSubchannels","getConnectivityState","tryToConnect","watchConnectivityState","Infinity","deadlineDate","getTime","createCall","getOptions","exports"],"sources":["/Users/husseinmohamed/Desktop/Learn_Rust/projects/grpc-project/client-grpc-messaging/node_modules/@grpc/grpc-js/src/internal-channel.ts"],"sourcesContent":["/*\n * Copyright 2019 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { ChannelCredentials } from './channel-credentials';\nimport { ChannelOptions } from './channel-options';\nimport { ResolvingLoadBalancer } from './resolving-load-balancer';\nimport { SubchannelPool, getSubchannelPool } from './subchannel-pool';\nimport { ChannelControlHelper } from './load-balancer';\nimport { UnavailablePicker, Picker, QueuePicker, PickArgs, PickResult, PickResultType } from './picker';\nimport { Metadata } from './metadata';\nimport { Status, LogVerbosity, Propagate } from './constants';\nimport { FilterStackFactory } from './filter-stack';\nimport { CompressionFilterFactory } from './compression-filter';\nimport {\n  CallConfig,\n  ConfigSelector,\n  getDefaultAuthority,\n  mapUriDefaultScheme,\n} from './resolver';\nimport { trace, isTracerEnabled } from './logging';\nimport { SubchannelAddress } from './subchannel-address';\nimport { mapProxyName } from './http_proxy';\nimport { GrpcUri, parseUri, uriToString } from './uri-parser';\nimport { ServerSurfaceCall } from './server-call';\n\nimport { ConnectivityState } from './connectivity-state';\nimport {\n  ChannelInfo,\n  ChannelRef,\n  ChannelzCallTracker,\n  ChannelzChildrenTracker,\n  ChannelzTrace,\n  registerChannelzChannel,\n  SubchannelRef,\n  unregisterChannelzRef,\n} from './channelz';\nimport { LoadBalancingCall } from './load-balancing-call';\nimport { CallCredentials } from './call-credentials';\nimport { Call, CallStreamOptions, StatusObject } from './call-interface';\nimport { Deadline, deadlineToString } from './deadline';\nimport { ResolvingCall } from './resolving-call';\nimport { getNextCallNumber } from './call-number';\nimport { restrictControlPlaneStatusCode } from './control-plane-status';\nimport {\n  MessageBufferTracker,\n  RetryingCall,\n  RetryThrottler,\n} from './retrying-call';\nimport {\n  BaseSubchannelWrapper,\n  ConnectivityStateListener,\n  SubchannelInterface,\n} from './subchannel-interface';\n\n/**\n * See https://nodejs.org/api/timers.html#timers_setinterval_callback_delay_args\n */\nconst MAX_TIMEOUT_TIME = 2147483647;\n\nconst MIN_IDLE_TIMEOUT_MS = 1000;\n\n// 30 minutes\nconst DEFAULT_IDLE_TIMEOUT_MS = 30 * 60 * 1000;\n\ninterface ConnectivityStateWatcher {\n  currentState: ConnectivityState;\n  timer: NodeJS.Timeout | null;\n  callback: (error?: Error) => void;\n}\n\ninterface NoneConfigResult {\n  type: 'NONE';\n}\n\ninterface SuccessConfigResult {\n  type: 'SUCCESS';\n  config: CallConfig;\n}\n\ninterface ErrorConfigResult {\n  type: 'ERROR';\n  error: StatusObject;\n}\n\ntype GetConfigResult =\n  | NoneConfigResult\n  | SuccessConfigResult\n  | ErrorConfigResult;\n\nconst RETRY_THROTTLER_MAP: Map<string, RetryThrottler> = new Map();\n\nconst DEFAULT_RETRY_BUFFER_SIZE_BYTES = 1 << 24; // 16 MB\nconst DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES = 1 << 20; // 1 MB\n\nclass ChannelSubchannelWrapper\n  extends BaseSubchannelWrapper\n  implements SubchannelInterface\n{\n  private refCount = 0;\n  private subchannelStateListener: ConnectivityStateListener;\n  constructor(\n    childSubchannel: SubchannelInterface,\n    private channel: InternalChannel\n  ) {\n    super(childSubchannel);\n    this.subchannelStateListener = (\n      subchannel,\n      previousState,\n      newState,\n      keepaliveTime\n    ) => {\n      channel.throttleKeepalive(keepaliveTime);\n    };\n    childSubchannel.addConnectivityStateListener(this.subchannelStateListener);\n  }\n\n  ref(): void {\n    this.child.ref();\n    this.refCount += 1;\n  }\n\n  unref(): void {\n    this.child.unref();\n    this.refCount -= 1;\n    if (this.refCount <= 0) {\n      this.child.removeConnectivityStateListener(this.subchannelStateListener);\n      this.channel.removeWrappedSubchannel(this);\n    }\n  }\n}\n\nclass ShutdownPicker implements Picker {\n  pick(pickArgs: PickArgs): PickResult {\n    return {\n      pickResultType: PickResultType.DROP,\n      status: {\n        code: Status.UNAVAILABLE,\n        details: 'Channel closed before call started',\n        metadata: new Metadata()\n      },\n      subchannel: null,\n      onCallStarted: null,\n      onCallEnded: null\n    }\n  }\n}\n\nexport class InternalChannel {\n  private readonly resolvingLoadBalancer: ResolvingLoadBalancer;\n  private readonly subchannelPool: SubchannelPool;\n  private connectivityState: ConnectivityState = ConnectivityState.IDLE;\n  private currentPicker: Picker = new UnavailablePicker();\n  /**\n   * Calls queued up to get a call config. Should only be populated before the\n   * first time the resolver returns a result, which includes the ConfigSelector.\n   */\n  private configSelectionQueue: ResolvingCall[] = [];\n  private pickQueue: LoadBalancingCall[] = [];\n  private connectivityStateWatchers: ConnectivityStateWatcher[] = [];\n  private readonly defaultAuthority: string;\n  private readonly filterStackFactory: FilterStackFactory;\n  private readonly target: GrpcUri;\n  /**\n   * This timer does not do anything on its own. Its purpose is to hold the\n   * event loop open while there are any pending calls for the channel that\n   * have not yet been assigned to specific subchannels. In other words,\n   * the invariant is that callRefTimer is reffed if and only if pickQueue\n   * is non-empty.\n   */\n  private readonly callRefTimer: NodeJS.Timeout;\n  private configSelector: ConfigSelector | null = null;\n  /**\n   * This is the error from the name resolver if it failed most recently. It\n   * is only used to end calls that start while there is no config selector\n   * and the name resolver is in backoff, so it should be nulled if\n   * configSelector becomes set or the channel state becomes anything other\n   * than TRANSIENT_FAILURE.\n   */\n  private currentResolutionError: StatusObject | null = null;\n  private readonly retryBufferTracker: MessageBufferTracker;\n  private keepaliveTime: number;\n  private readonly wrappedSubchannels: Set<ChannelSubchannelWrapper> =\n    new Set();\n\n  private callCount = 0;\n  private idleTimer: NodeJS.Timeout | null = null;\n  private readonly idleTimeoutMs: number;\n  private lastActivityTimestamp: Date;\n\n  // Channelz info\n  private readonly channelzEnabled: boolean = true;\n  private readonly originalTarget: string;\n  private readonly channelzRef: ChannelRef;\n  private readonly channelzTrace: ChannelzTrace;\n  private readonly callTracker = new ChannelzCallTracker();\n  private readonly childrenTracker = new ChannelzChildrenTracker();\n\n  /**\n   * Randomly generated ID to be passed to the config selector, for use by\n   * ring_hash in xDS. An integer distributed approximately uniformly between\n   * 0 and MAX_SAFE_INTEGER.\n   */\n  private readonly randomChannelId = Math.floor(\n    Math.random() * Number.MAX_SAFE_INTEGER\n  );\n\n  constructor(\n    target: string,\n    private readonly credentials: ChannelCredentials,\n    private readonly options: ChannelOptions\n  ) {\n    if (typeof target !== 'string') {\n      throw new TypeError('Channel target must be a string');\n    }\n    if (!(credentials instanceof ChannelCredentials)) {\n      throw new TypeError(\n        'Channel credentials must be a ChannelCredentials object'\n      );\n    }\n    if (options) {\n      if (typeof options !== 'object') {\n        throw new TypeError('Channel options must be an object');\n      }\n    }\n    this.originalTarget = target;\n    const originalTargetUri = parseUri(target);\n    if (originalTargetUri === null) {\n      throw new Error(`Could not parse target name \"${target}\"`);\n    }\n    /* This ensures that the target has a scheme that is registered with the\n     * resolver */\n    const defaultSchemeMapResult = mapUriDefaultScheme(originalTargetUri);\n    if (defaultSchemeMapResult === null) {\n      throw new Error(\n        `Could not find a default scheme for target name \"${target}\"`\n      );\n    }\n\n    this.callRefTimer = setInterval(() => {}, MAX_TIMEOUT_TIME);\n    this.callRefTimer.unref?.();\n\n    if (this.options['grpc.enable_channelz'] === 0) {\n      this.channelzEnabled = false;\n    }\n\n    this.channelzTrace = new ChannelzTrace();\n    this.channelzRef = registerChannelzChannel(\n      target,\n      () => this.getChannelzInfo(),\n      this.channelzEnabled\n    );\n    if (this.channelzEnabled) {\n      this.channelzTrace.addTrace('CT_INFO', 'Channel created');\n    }\n\n    if (this.options['grpc.default_authority']) {\n      this.defaultAuthority = this.options['grpc.default_authority'] as string;\n    } else {\n      this.defaultAuthority = getDefaultAuthority(defaultSchemeMapResult);\n    }\n    const proxyMapResult = mapProxyName(defaultSchemeMapResult, options);\n    this.target = proxyMapResult.target;\n    this.options = Object.assign({}, this.options, proxyMapResult.extraOptions);\n\n    /* The global boolean parameter to getSubchannelPool has the inverse meaning to what\n     * the grpc.use_local_subchannel_pool channel option means. */\n    this.subchannelPool = getSubchannelPool(\n      (options['grpc.use_local_subchannel_pool'] ?? 0) === 0\n    );\n    this.retryBufferTracker = new MessageBufferTracker(\n      options['grpc.retry_buffer_size'] ?? DEFAULT_RETRY_BUFFER_SIZE_BYTES,\n      options['grpc.per_rpc_retry_buffer_size'] ??\n        DEFAULT_PER_RPC_RETRY_BUFFER_SIZE_BYTES\n    );\n    this.keepaliveTime = options['grpc.keepalive_time_ms'] ?? -1;\n    this.idleTimeoutMs = Math.max(\n      options['grpc.client_idle_timeout_ms'] ?? DEFAULT_IDLE_TIMEOUT_MS,\n      MIN_IDLE_TIMEOUT_MS\n    );\n    const channelControlHelper: ChannelControlHelper = {\n      createSubchannel: (\n        subchannelAddress: SubchannelAddress,\n        subchannelArgs: ChannelOptions\n      ) => {\n        const subchannel = this.subchannelPool.getOrCreateSubchannel(\n          this.target,\n          subchannelAddress,\n          Object.assign({}, this.options, subchannelArgs),\n          this.credentials\n        );\n        subchannel.throttleKeepalive(this.keepaliveTime);\n        if (this.channelzEnabled) {\n          this.channelzTrace.addTrace(\n            'CT_INFO',\n            'Created subchannel or used existing subchannel',\n            subchannel.getChannelzRef()\n          );\n        }\n        const wrappedSubchannel = new ChannelSubchannelWrapper(\n          subchannel,\n          this\n        );\n        this.wrappedSubchannels.add(wrappedSubchannel);\n        return wrappedSubchannel;\n      },\n      updateState: (connectivityState: ConnectivityState, picker: Picker) => {\n        this.currentPicker = picker;\n        const queueCopy = this.pickQueue.slice();\n        this.pickQueue = [];\n        if (queueCopy.length > 0) {\n          this.callRefTimerUnref();\n        }\n        for (const call of queueCopy) {\n          call.doPick();\n        }\n        this.updateState(connectivityState);\n      },\n      requestReresolution: () => {\n        // This should never be called.\n        throw new Error(\n          'Resolving load balancer should never call requestReresolution'\n        );\n      },\n      addChannelzChild: (child: ChannelRef | SubchannelRef) => {\n        if (this.channelzEnabled) {\n          this.childrenTracker.refChild(child);\n        }\n      },\n      removeChannelzChild: (child: ChannelRef | SubchannelRef) => {\n        if (this.channelzEnabled) {\n          this.childrenTracker.unrefChild(child);\n        }\n      },\n    };\n    this.resolvingLoadBalancer = new ResolvingLoadBalancer(\n      this.target,\n      channelControlHelper,\n      options,\n      (serviceConfig, configSelector) => {\n        if (serviceConfig.retryThrottling) {\n          RETRY_THROTTLER_MAP.set(\n            this.getTarget(),\n            new RetryThrottler(\n              serviceConfig.retryThrottling.maxTokens,\n              serviceConfig.retryThrottling.tokenRatio,\n              RETRY_THROTTLER_MAP.get(this.getTarget())\n            )\n          );\n        } else {\n          RETRY_THROTTLER_MAP.delete(this.getTarget());\n        }\n        if (this.channelzEnabled) {\n          this.channelzTrace.addTrace(\n            'CT_INFO',\n            'Address resolution succeeded'\n          );\n        }\n        this.configSelector = configSelector;\n        this.currentResolutionError = null;\n        /* We process the queue asynchronously to ensure that the corresponding\n         * load balancer update has completed. */\n        process.nextTick(() => {\n          const localQueue = this.configSelectionQueue;\n          this.configSelectionQueue = [];\n          if (localQueue.length > 0) {\n            this.callRefTimerUnref();\n          }\n          for (const call of localQueue) {\n            call.getConfig();\n          }\n        });\n      },\n      status => {\n        if (this.channelzEnabled) {\n          this.channelzTrace.addTrace(\n            'CT_WARNING',\n            'Address resolution failed with code ' +\n              status.code +\n              ' and details \"' +\n              status.details +\n              '\"'\n          );\n        }\n        if (this.configSelectionQueue.length > 0) {\n          this.trace(\n            'Name resolution failed with calls queued for config selection'\n          );\n        }\n        if (this.configSelector === null) {\n          this.currentResolutionError = {\n            ...restrictControlPlaneStatusCode(status.code, status.details),\n            metadata: status.metadata,\n          };\n        }\n        const localQueue = this.configSelectionQueue;\n        this.configSelectionQueue = [];\n        if (localQueue.length > 0) {\n          this.callRefTimerUnref();\n        }\n        for (const call of localQueue) {\n          call.reportResolverError(status);\n        }\n      }\n    );\n    this.filterStackFactory = new FilterStackFactory([\n      new CompressionFilterFactory(this, this.options),\n    ]);\n    this.trace(\n      'Channel constructed with options ' +\n        JSON.stringify(options, undefined, 2)\n    );\n    const error = new Error();\n    if (isTracerEnabled('channel_stacktrace')){\n      trace(\n        LogVerbosity.DEBUG,\n        'channel_stacktrace',\n        '(' +\n          this.channelzRef.id +\n          ') ' +\n          'Channel constructed \\n' +\n          error.stack?.substring(error.stack.indexOf('\\n') + 1)\n      );\n    }\n    this.lastActivityTimestamp = new Date();\n  }\n\n  private getChannelzInfo(): ChannelInfo {\n    return {\n      target: this.originalTarget,\n      state: this.connectivityState,\n      trace: this.channelzTrace,\n      callTracker: this.callTracker,\n      children: this.childrenTracker.getChildLists(),\n    };\n  }\n\n  private trace(text: string, verbosityOverride?: LogVerbosity) {\n    trace(\n      verbosityOverride ?? LogVerbosity.DEBUG,\n      'channel',\n      '(' + this.channelzRef.id + ') ' + uriToString(this.target) + ' ' + text\n    );\n  }\n\n  private callRefTimerRef() {\n    // If the hasRef function does not exist, always run the code\n    if (!this.callRefTimer.hasRef?.()) {\n      this.trace(\n        'callRefTimer.ref | configSelectionQueue.length=' +\n          this.configSelectionQueue.length +\n          ' pickQueue.length=' +\n          this.pickQueue.length\n      );\n      this.callRefTimer.ref?.();\n    }\n  }\n\n  private callRefTimerUnref() {\n    // If the hasRef function does not exist, always run the code\n    if (!this.callRefTimer.hasRef || this.callRefTimer.hasRef()) {\n      this.trace(\n        'callRefTimer.unref | configSelectionQueue.length=' +\n          this.configSelectionQueue.length +\n          ' pickQueue.length=' +\n          this.pickQueue.length\n      );\n      this.callRefTimer.unref?.();\n    }\n  }\n\n  private removeConnectivityStateWatcher(\n    watcherObject: ConnectivityStateWatcher\n  ) {\n    const watcherIndex = this.connectivityStateWatchers.findIndex(\n      value => value === watcherObject\n    );\n    if (watcherIndex >= 0) {\n      this.connectivityStateWatchers.splice(watcherIndex, 1);\n    }\n  }\n\n  private updateState(newState: ConnectivityState): void {\n    trace(\n      LogVerbosity.DEBUG,\n      'connectivity_state',\n      '(' +\n        this.channelzRef.id +\n        ') ' +\n        uriToString(this.target) +\n        ' ' +\n        ConnectivityState[this.connectivityState] +\n        ' -> ' +\n        ConnectivityState[newState]\n    );\n    if (this.channelzEnabled) {\n      this.channelzTrace.addTrace(\n        'CT_INFO',\n        'Connectivity state change to ' + ConnectivityState[newState]\n      );\n    }\n    this.connectivityState = newState;\n    const watchersCopy = this.connectivityStateWatchers.slice();\n    for (const watcherObject of watchersCopy) {\n      if (newState !== watcherObject.currentState) {\n        if (watcherObject.timer) {\n          clearTimeout(watcherObject.timer);\n        }\n        this.removeConnectivityStateWatcher(watcherObject);\n        watcherObject.callback();\n      }\n    }\n    if (newState !== ConnectivityState.TRANSIENT_FAILURE) {\n      this.currentResolutionError = null;\n    }\n  }\n\n  throttleKeepalive(newKeepaliveTime: number) {\n    if (newKeepaliveTime > this.keepaliveTime) {\n      this.keepaliveTime = newKeepaliveTime;\n      for (const wrappedSubchannel of this.wrappedSubchannels) {\n        wrappedSubchannel.throttleKeepalive(newKeepaliveTime);\n      }\n    }\n  }\n\n  removeWrappedSubchannel(wrappedSubchannel: ChannelSubchannelWrapper) {\n    this.wrappedSubchannels.delete(wrappedSubchannel);\n  }\n\n  doPick(metadata: Metadata, extraPickInfo: { [key: string]: string }) {\n    return this.currentPicker.pick({\n      metadata: metadata,\n      extraPickInfo: extraPickInfo,\n    });\n  }\n\n  queueCallForPick(call: LoadBalancingCall) {\n    this.pickQueue.push(call);\n    this.callRefTimerRef();\n  }\n\n  getConfig(method: string, metadata: Metadata): GetConfigResult {\n    if (this.connectivityState !== ConnectivityState.SHUTDOWN) {\n      this.resolvingLoadBalancer.exitIdle();\n    }\n    if (this.configSelector) {\n      return {\n        type: 'SUCCESS',\n        config: this.configSelector(method, metadata, this.randomChannelId),\n      };\n    } else {\n      if (this.currentResolutionError) {\n        return {\n          type: 'ERROR',\n          error: this.currentResolutionError,\n        };\n      } else {\n        return {\n          type: 'NONE',\n        };\n      }\n    }\n  }\n\n  queueCallForConfig(call: ResolvingCall) {\n    this.configSelectionQueue.push(call);\n    this.callRefTimerRef();\n  }\n\n  private enterIdle() {\n    this.resolvingLoadBalancer.destroy();\n    this.updateState(ConnectivityState.IDLE);\n    this.currentPicker = new QueuePicker(this.resolvingLoadBalancer);\n    if (this.idleTimer) {\n      clearTimeout(this.idleTimer);\n      this.idleTimer = null;\n    }\n  }\n\n  private startIdleTimeout(timeoutMs: number) {\n    this.idleTimer = setTimeout(() => {\n      if (this.callCount > 0) {\n        /* If there is currently a call, the channel will not go idle for a\n         * period of at least idleTimeoutMs, so check again after that time.\n         */\n        this.startIdleTimeout(this.idleTimeoutMs);\n        return;\n      }\n      const now = new Date();\n      const timeSinceLastActivity =\n        now.valueOf() - this.lastActivityTimestamp.valueOf();\n      if (timeSinceLastActivity >= this.idleTimeoutMs) {\n        this.trace(\n          'Idle timer triggered after ' +\n            this.idleTimeoutMs +\n            'ms of inactivity'\n        );\n        this.enterIdle();\n      } else {\n        /* Whenever the timer fires with the latest activity being too recent,\n         * set the timer again for the time when the time since the last\n         * activity is equal to the timeout. This should result in the timer\n         * firing no more than once every idleTimeoutMs/2 on average. */\n        this.startIdleTimeout(this.idleTimeoutMs - timeSinceLastActivity);\n      }\n    }, timeoutMs);\n    this.idleTimer.unref?.();\n  }\n\n  private maybeStartIdleTimer() {\n    if (\n      this.connectivityState !== ConnectivityState.SHUTDOWN &&\n      !this.idleTimer\n    ) {\n      this.startIdleTimeout(this.idleTimeoutMs);\n    }\n  }\n\n  private onCallStart() {\n    if (this.channelzEnabled) {\n      this.callTracker.addCallStarted();\n    }\n    this.callCount += 1;\n  }\n\n  private onCallEnd(status: StatusObject) {\n    if (this.channelzEnabled) {\n      if (status.code === Status.OK) {\n        this.callTracker.addCallSucceeded();\n      } else {\n        this.callTracker.addCallFailed();\n      }\n    }\n    this.callCount -= 1;\n    this.lastActivityTimestamp = new Date();\n    this.maybeStartIdleTimer();\n  }\n\n  createLoadBalancingCall(\n    callConfig: CallConfig,\n    method: string,\n    host: string,\n    credentials: CallCredentials,\n    deadline: Deadline\n  ): LoadBalancingCall {\n    const callNumber = getNextCallNumber();\n    this.trace(\n      'createLoadBalancingCall [' + callNumber + '] method=\"' + method + '\"'\n    );\n    return new LoadBalancingCall(\n      this,\n      callConfig,\n      method,\n      host,\n      credentials,\n      deadline,\n      callNumber\n    );\n  }\n\n  createRetryingCall(\n    callConfig: CallConfig,\n    method: string,\n    host: string,\n    credentials: CallCredentials,\n    deadline: Deadline\n  ): RetryingCall {\n    const callNumber = getNextCallNumber();\n    this.trace(\n      'createRetryingCall [' + callNumber + '] method=\"' + method + '\"'\n    );\n    return new RetryingCall(\n      this,\n      callConfig,\n      method,\n      host,\n      credentials,\n      deadline,\n      callNumber,\n      this.retryBufferTracker,\n      RETRY_THROTTLER_MAP.get(this.getTarget())\n    );\n  }\n\n  createInnerCall(\n    callConfig: CallConfig,\n    method: string,\n    host: string,\n    credentials: CallCredentials,\n    deadline: Deadline\n  ): LoadBalancingCall | RetryingCall {\n    // Create a RetryingCall if retries are enabled\n    if (this.options['grpc.enable_retries'] === 0) {\n      return this.createLoadBalancingCall(\n        callConfig,\n        method,\n        host,\n        credentials,\n        deadline\n      );\n    } else {\n      return this.createRetryingCall(\n        callConfig,\n        method,\n        host,\n        credentials,\n        deadline\n      );\n    }\n  }\n\n  createResolvingCall(\n    method: string,\n    deadline: Deadline,\n    host: string | null | undefined,\n    parentCall: ServerSurfaceCall | null,\n    propagateFlags: number | null | undefined\n  ): ResolvingCall {\n    const callNumber = getNextCallNumber();\n    this.trace(\n      'createResolvingCall [' +\n        callNumber +\n        '] method=\"' +\n        method +\n        '\", deadline=' +\n        deadlineToString(deadline)\n    );\n    const finalOptions: CallStreamOptions = {\n      deadline: deadline,\n      flags: propagateFlags ?? Propagate.DEFAULTS,\n      host: host ?? this.defaultAuthority,\n      parentCall: parentCall,\n    };\n\n    const call = new ResolvingCall(\n      this,\n      method,\n      finalOptions,\n      this.filterStackFactory.clone(),\n      this.credentials._getCallCredentials(),\n      callNumber\n    );\n\n    this.onCallStart();\n    call.addStatusWatcher(status => {\n      this.onCallEnd(status);\n    });\n    return call;\n  }\n\n  close() {\n    this.resolvingLoadBalancer.destroy();\n    this.updateState(ConnectivityState.SHUTDOWN);\n    this.currentPicker = new ShutdownPicker();\n    for (const call of this.configSelectionQueue) {\n      call.cancelWithStatus(Status.UNAVAILABLE, 'Channel closed before call started');\n    }\n    this.configSelectionQueue = [];\n    for (const call of this.pickQueue) {\n      call.cancelWithStatus(Status.UNAVAILABLE, 'Channel closed before call started');\n    }\n    this.pickQueue = [];\n    clearInterval(this.callRefTimer);\n    if (this.idleTimer) {\n      clearTimeout(this.idleTimer);\n    }\n    if (this.channelzEnabled) {\n      unregisterChannelzRef(this.channelzRef);\n    }\n\n    this.subchannelPool.unrefUnusedSubchannels();\n  }\n\n  getTarget() {\n    return uriToString(this.target);\n  }\n\n  getConnectivityState(tryToConnect: boolean) {\n    const connectivityState = this.connectivityState;\n    if (tryToConnect) {\n      this.resolvingLoadBalancer.exitIdle();\n      this.lastActivityTimestamp = new Date();\n      this.maybeStartIdleTimer();\n    }\n    return connectivityState;\n  }\n\n  watchConnectivityState(\n    currentState: ConnectivityState,\n    deadline: Date | number,\n    callback: (error?: Error) => void\n  ): void {\n    if (this.connectivityState === ConnectivityState.SHUTDOWN) {\n      throw new Error('Channel has been shut down');\n    }\n    let timer = null;\n    if (deadline !== Infinity) {\n      const deadlineDate: Date =\n        deadline instanceof Date ? deadline : new Date(deadline);\n      const now = new Date();\n      if (deadline === -Infinity || deadlineDate <= now) {\n        process.nextTick(\n          callback,\n          new Error('Deadline passed without connectivity state change')\n        );\n        return;\n      }\n      timer = setTimeout(() => {\n        this.removeConnectivityStateWatcher(watcherObject);\n        callback(\n          new Error('Deadline passed without connectivity state change')\n        );\n      }, deadlineDate.getTime() - now.getTime());\n    }\n    const watcherObject = {\n      currentState,\n      callback,\n      timer,\n    };\n    this.connectivityStateWatchers.push(watcherObject);\n  }\n\n  /**\n   * Get the channelz reference object for this channel. The returned value is\n   * garbage if channelz is disabled for this channel.\n   * @returns\n   */\n  getChannelzRef() {\n    return this.channelzRef;\n  }\n\n  createCall(\n    method: string,\n    deadline: Deadline,\n    host: string | null | undefined,\n    parentCall: ServerSurfaceCall | null,\n    propagateFlags: number | null | undefined\n  ): Call {\n    if (typeof method !== 'string') {\n      throw new TypeError('Channel#createCall: method must be a string');\n    }\n    if (!(typeof deadline === 'number' || deadline instanceof Date)) {\n      throw new TypeError(\n        'Channel#createCall: deadline must be a number or Date'\n      );\n    }\n    if (this.connectivityState === ConnectivityState.SHUTDOWN) {\n      throw new Error('Channel has been shut down');\n    }\n    return this.createResolvingCall(\n      method,\n      deadline,\n      host,\n      parentCall,\n      propagateFlags\n    );\n  }\n\n  getOptions() {\n    return this.options;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}