{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = void 0;\nconst net_1 = require(\"net\");\nconst constants_1 = require(\"./constants\");\nconst metadata_1 = require(\"./metadata\");\nconst resolver_1 = require(\"./resolver\");\nconst uri_parser_1 = require(\"./uri-parser\");\nconst logging = require(\"./logging\");\nconst TRACER_NAME = 'ip_resolver';\nfunction trace(text) {\n  logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst IPV4_SCHEME = 'ipv4';\nconst IPV6_SCHEME = 'ipv6';\n/**\n * The default TCP port to connect to if not explicitly specified in the target.\n */\nconst DEFAULT_PORT = 443;\nclass IpResolver {\n  constructor(target, listener, channelOptions) {\n    var _a;\n    this.listener = listener;\n    this.endpoints = [];\n    this.error = null;\n    this.hasReturnedResult = false;\n    trace('Resolver constructed for target ' + (0, uri_parser_1.uriToString)(target));\n    const addresses = [];\n    if (!(target.scheme === IPV4_SCHEME || target.scheme === IPV6_SCHEME)) {\n      this.error = {\n        code: constants_1.Status.UNAVAILABLE,\n        details: `Unrecognized scheme ${target.scheme} in IP resolver`,\n        metadata: new metadata_1.Metadata()\n      };\n      return;\n    }\n    const pathList = target.path.split(',');\n    for (const path of pathList) {\n      const hostPort = (0, uri_parser_1.splitHostPort)(path);\n      if (hostPort === null) {\n        this.error = {\n          code: constants_1.Status.UNAVAILABLE,\n          details: `Failed to parse ${target.scheme} address ${path}`,\n          metadata: new metadata_1.Metadata()\n        };\n        return;\n      }\n      if (target.scheme === IPV4_SCHEME && !(0, net_1.isIPv4)(hostPort.host) || target.scheme === IPV6_SCHEME && !(0, net_1.isIPv6)(hostPort.host)) {\n        this.error = {\n          code: constants_1.Status.UNAVAILABLE,\n          details: `Failed to parse ${target.scheme} address ${path}`,\n          metadata: new metadata_1.Metadata()\n        };\n        return;\n      }\n      addresses.push({\n        host: hostPort.host,\n        port: (_a = hostPort.port) !== null && _a !== void 0 ? _a : DEFAULT_PORT\n      });\n    }\n    this.endpoints = addresses.map(address => ({\n      addresses: [address]\n    }));\n    trace('Parsed ' + target.scheme + ' address list ' + addresses);\n  }\n  updateResolution() {\n    if (!this.hasReturnedResult) {\n      this.hasReturnedResult = true;\n      process.nextTick(() => {\n        if (this.error) {\n          this.listener.onError(this.error);\n        } else {\n          this.listener.onSuccessfulResolution(this.endpoints, null, null, null, {});\n        }\n      });\n    }\n  }\n  destroy() {\n    this.hasReturnedResult = false;\n  }\n  static getDefaultAuthority(target) {\n    return target.path.split(',')[0];\n  }\n}\nfunction setup() {\n  (0, resolver_1.registerResolver)(IPV4_SCHEME, IpResolver);\n  (0, resolver_1.registerResolver)(IPV6_SCHEME, IpResolver);\n}\nexports.setup = setup;","map":{"version":3,"names":["net_1","require","constants_1","metadata_1","resolver_1","uri_parser_1","logging","TRACER_NAME","trace","text","LogVerbosity","DEBUG","IPV4_SCHEME","IPV6_SCHEME","DEFAULT_PORT","IpResolver","constructor","target","listener","channelOptions","endpoints","error","hasReturnedResult","uriToString","addresses","scheme","code","Status","UNAVAILABLE","details","metadata","Metadata","pathList","path","split","hostPort","splitHostPort","isIPv4","host","isIPv6","push","port","_a","map","address","updateResolution","process","nextTick","onError","onSuccessfulResolution","destroy","getDefaultAuthority","setup","registerResolver","exports"],"sources":["/Users/husseinmohamed/Desktop/Learn_Rust/projects/grpc-project/client-grpc-messaging/node_modules/@grpc/grpc-js/src/resolver-ip.ts"],"sourcesContent":["/*\n * Copyright 2021 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isIPv4, isIPv6 } from 'net';\nimport { StatusObject } from './call-interface';\nimport { ChannelOptions } from './channel-options';\nimport { LogVerbosity, Status } from './constants';\nimport { Metadata } from './metadata';\nimport { registerResolver, Resolver, ResolverListener } from './resolver';\nimport { Endpoint, SubchannelAddress } from './subchannel-address';\nimport { GrpcUri, splitHostPort, uriToString } from './uri-parser';\nimport * as logging from './logging';\n\nconst TRACER_NAME = 'ip_resolver';\n\nfunction trace(text: string): void {\n  logging.trace(LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n\nconst IPV4_SCHEME = 'ipv4';\nconst IPV6_SCHEME = 'ipv6';\n\n/**\n * The default TCP port to connect to if not explicitly specified in the target.\n */\nconst DEFAULT_PORT = 443;\n\nclass IpResolver implements Resolver {\n  private endpoints: Endpoint[] = [];\n  private error: StatusObject | null = null;\n  private hasReturnedResult = false;\n  constructor(\n    target: GrpcUri,\n    private listener: ResolverListener,\n    channelOptions: ChannelOptions\n  ) {\n    trace('Resolver constructed for target ' + uriToString(target));\n    const addresses: SubchannelAddress[] = [];\n    if (!(target.scheme === IPV4_SCHEME || target.scheme === IPV6_SCHEME)) {\n      this.error = {\n        code: Status.UNAVAILABLE,\n        details: `Unrecognized scheme ${target.scheme} in IP resolver`,\n        metadata: new Metadata(),\n      };\n      return;\n    }\n    const pathList = target.path.split(',');\n    for (const path of pathList) {\n      const hostPort = splitHostPort(path);\n      if (hostPort === null) {\n        this.error = {\n          code: Status.UNAVAILABLE,\n          details: `Failed to parse ${target.scheme} address ${path}`,\n          metadata: new Metadata(),\n        };\n        return;\n      }\n      if (\n        (target.scheme === IPV4_SCHEME && !isIPv4(hostPort.host)) ||\n        (target.scheme === IPV6_SCHEME && !isIPv6(hostPort.host))\n      ) {\n        this.error = {\n          code: Status.UNAVAILABLE,\n          details: `Failed to parse ${target.scheme} address ${path}`,\n          metadata: new Metadata(),\n        };\n        return;\n      }\n      addresses.push({\n        host: hostPort.host,\n        port: hostPort.port ?? DEFAULT_PORT,\n      });\n    }\n    this.endpoints = addresses.map(address => ({ addresses: [address] }));\n    trace('Parsed ' + target.scheme + ' address list ' + addresses);\n  }\n  updateResolution(): void {\n    if (!this.hasReturnedResult) {\n      this.hasReturnedResult = true;\n      process.nextTick(() => {\n        if (this.error) {\n          this.listener.onError(this.error);\n        } else {\n          this.listener.onSuccessfulResolution(\n            this.endpoints,\n            null,\n            null,\n            null,\n            {}\n          );\n        }\n      });\n    }\n  }\n  destroy(): void {\n    this.hasReturnedResult = false;\n  }\n\n  static getDefaultAuthority(target: GrpcUri): string {\n    return target.path.split(',')[0];\n  }\n}\n\nexport function setup() {\n  registerResolver(IPV4_SCHEME, IpResolver);\n  registerResolver(IPV6_SCHEME, IpResolver);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}