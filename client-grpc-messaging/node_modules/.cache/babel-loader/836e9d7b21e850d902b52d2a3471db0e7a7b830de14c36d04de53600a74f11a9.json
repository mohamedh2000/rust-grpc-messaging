{"ast":null,"code":"\"use strict\";\n\n/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nvar _a;\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.setup = exports.OutlierDetectionLoadBalancer = exports.OutlierDetectionLoadBalancingConfig = void 0;\nconst connectivity_state_1 = require(\"./connectivity-state\");\nconst constants_1 = require(\"./constants\");\nconst duration_1 = require(\"./duration\");\nconst experimental_1 = require(\"./experimental\");\nconst load_balancer_1 = require(\"./load-balancer\");\nconst load_balancer_child_handler_1 = require(\"./load-balancer-child-handler\");\nconst picker_1 = require(\"./picker\");\nconst subchannel_address_1 = require(\"./subchannel-address\");\nconst subchannel_interface_1 = require(\"./subchannel-interface\");\nconst logging = require(\"./logging\");\nconst TRACER_NAME = 'outlier_detection';\nfunction trace(text) {\n  logging.trace(constants_1.LogVerbosity.DEBUG, TRACER_NAME, text);\n}\nconst TYPE_NAME = 'outlier_detection';\nconst OUTLIER_DETECTION_ENABLED = ((_a = process.env.GRPC_EXPERIMENTAL_ENABLE_OUTLIER_DETECTION) !== null && _a !== void 0 ? _a : 'true') === 'true';\nconst defaultSuccessRateEjectionConfig = {\n  stdev_factor: 1900,\n  enforcement_percentage: 100,\n  minimum_hosts: 5,\n  request_volume: 100\n};\nconst defaultFailurePercentageEjectionConfig = {\n  threshold: 85,\n  enforcement_percentage: 100,\n  minimum_hosts: 5,\n  request_volume: 50\n};\nfunction validateFieldType(obj, fieldName, expectedType, objectName) {\n  if (fieldName in obj && obj[fieldName] !== undefined && typeof obj[fieldName] !== expectedType) {\n    const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n    throw new Error(`outlier detection config ${fullFieldName} parse error: expected ${expectedType}, got ${typeof obj[fieldName]}`);\n  }\n}\nfunction validatePositiveDuration(obj, fieldName, objectName) {\n  const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n  if (fieldName in obj && obj[fieldName] !== undefined) {\n    if (!(0, duration_1.isDuration)(obj[fieldName])) {\n      throw new Error(`outlier detection config ${fullFieldName} parse error: expected Duration, got ${typeof obj[fieldName]}`);\n    }\n    if (!(obj[fieldName].seconds >= 0 && obj[fieldName].seconds <= 315576000000 && obj[fieldName].nanos >= 0 && obj[fieldName].nanos <= 999999999)) {\n      throw new Error(`outlier detection config ${fullFieldName} parse error: values out of range for non-negative Duaration`);\n    }\n  }\n}\nfunction validatePercentage(obj, fieldName, objectName) {\n  const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n  validateFieldType(obj, fieldName, 'number', objectName);\n  if (fieldName in obj && obj[fieldName] !== undefined && !(obj[fieldName] >= 0 && obj[fieldName] <= 100)) {\n    throw new Error(`outlier detection config ${fullFieldName} parse error: value out of range for percentage (0-100)`);\n  }\n}\nclass OutlierDetectionLoadBalancingConfig {\n  constructor(intervalMs, baseEjectionTimeMs, maxEjectionTimeMs, maxEjectionPercent, successRateEjection, failurePercentageEjection, childPolicy) {\n    this.childPolicy = childPolicy;\n    if (childPolicy.getLoadBalancerName() === 'pick_first') {\n      throw new Error('outlier_detection LB policy cannot have a pick_first child policy');\n    }\n    this.intervalMs = intervalMs !== null && intervalMs !== void 0 ? intervalMs : 10000;\n    this.baseEjectionTimeMs = baseEjectionTimeMs !== null && baseEjectionTimeMs !== void 0 ? baseEjectionTimeMs : 30000;\n    this.maxEjectionTimeMs = maxEjectionTimeMs !== null && maxEjectionTimeMs !== void 0 ? maxEjectionTimeMs : 300000;\n    this.maxEjectionPercent = maxEjectionPercent !== null && maxEjectionPercent !== void 0 ? maxEjectionPercent : 10;\n    this.successRateEjection = successRateEjection ? Object.assign(Object.assign({}, defaultSuccessRateEjectionConfig), successRateEjection) : null;\n    this.failurePercentageEjection = failurePercentageEjection ? Object.assign(Object.assign({}, defaultFailurePercentageEjectionConfig), failurePercentageEjection) : null;\n  }\n  getLoadBalancerName() {\n    return TYPE_NAME;\n  }\n  toJsonObject() {\n    var _a, _b;\n    return {\n      outlier_detection: {\n        interval: (0, duration_1.msToDuration)(this.intervalMs),\n        base_ejection_time: (0, duration_1.msToDuration)(this.baseEjectionTimeMs),\n        max_ejection_time: (0, duration_1.msToDuration)(this.maxEjectionTimeMs),\n        max_ejection_percent: this.maxEjectionPercent,\n        success_rate_ejection: (_a = this.successRateEjection) !== null && _a !== void 0 ? _a : undefined,\n        failure_percentage_ejection: (_b = this.failurePercentageEjection) !== null && _b !== void 0 ? _b : undefined,\n        child_policy: [this.childPolicy.toJsonObject()]\n      }\n    };\n  }\n  getIntervalMs() {\n    return this.intervalMs;\n  }\n  getBaseEjectionTimeMs() {\n    return this.baseEjectionTimeMs;\n  }\n  getMaxEjectionTimeMs() {\n    return this.maxEjectionTimeMs;\n  }\n  getMaxEjectionPercent() {\n    return this.maxEjectionPercent;\n  }\n  getSuccessRateEjectionConfig() {\n    return this.successRateEjection;\n  }\n  getFailurePercentageEjectionConfig() {\n    return this.failurePercentageEjection;\n  }\n  getChildPolicy() {\n    return this.childPolicy;\n  }\n  static createFromJson(obj) {\n    var _a;\n    validatePositiveDuration(obj, 'interval');\n    validatePositiveDuration(obj, 'base_ejection_time');\n    validatePositiveDuration(obj, 'max_ejection_time');\n    validatePercentage(obj, 'max_ejection_percent');\n    if ('success_rate_ejection' in obj && obj.success_rate_ejection !== undefined) {\n      if (typeof obj.success_rate_ejection !== 'object') {\n        throw new Error('outlier detection config success_rate_ejection must be an object');\n      }\n      validateFieldType(obj.success_rate_ejection, 'stdev_factor', 'number', 'success_rate_ejection');\n      validatePercentage(obj.success_rate_ejection, 'enforcement_percentage', 'success_rate_ejection');\n      validateFieldType(obj.success_rate_ejection, 'minimum_hosts', 'number', 'success_rate_ejection');\n      validateFieldType(obj.success_rate_ejection, 'request_volume', 'number', 'success_rate_ejection');\n    }\n    if ('failure_percentage_ejection' in obj && obj.failure_percentage_ejection !== undefined) {\n      if (typeof obj.failure_percentage_ejection !== 'object') {\n        throw new Error('outlier detection config failure_percentage_ejection must be an object');\n      }\n      validatePercentage(obj.failure_percentage_ejection, 'threshold', 'failure_percentage_ejection');\n      validatePercentage(obj.failure_percentage_ejection, 'enforcement_percentage', 'failure_percentage_ejection');\n      validateFieldType(obj.failure_percentage_ejection, 'minimum_hosts', 'number', 'failure_percentage_ejection');\n      validateFieldType(obj.failure_percentage_ejection, 'request_volume', 'number', 'failure_percentage_ejection');\n    }\n    if (!('child_policy' in obj) || !Array.isArray(obj.child_policy)) {\n      throw new Error('outlier detection config child_policy must be an array');\n    }\n    const childPolicy = (0, load_balancer_1.selectLbConfigFromList)(obj.child_policy);\n    if (!childPolicy) {\n      throw new Error('outlier detection config child_policy: no valid recognized policy found');\n    }\n    return new OutlierDetectionLoadBalancingConfig(obj.interval ? (0, duration_1.durationToMs)(obj.interval) : null, obj.base_ejection_time ? (0, duration_1.durationToMs)(obj.base_ejection_time) : null, obj.max_ejection_time ? (0, duration_1.durationToMs)(obj.max_ejection_time) : null, (_a = obj.max_ejection_percent) !== null && _a !== void 0 ? _a : null, obj.success_rate_ejection, obj.failure_percentage_ejection, childPolicy);\n  }\n}\nexports.OutlierDetectionLoadBalancingConfig = OutlierDetectionLoadBalancingConfig;\nclass OutlierDetectionSubchannelWrapper extends subchannel_interface_1.BaseSubchannelWrapper {\n  constructor(childSubchannel, mapEntry) {\n    super(childSubchannel);\n    this.mapEntry = mapEntry;\n    this.refCount = 0;\n  }\n  ref() {\n    this.child.ref();\n    this.refCount += 1;\n  }\n  unref() {\n    this.child.unref();\n    this.refCount -= 1;\n    if (this.refCount <= 0) {\n      if (this.mapEntry) {\n        const index = this.mapEntry.subchannelWrappers.indexOf(this);\n        if (index >= 0) {\n          this.mapEntry.subchannelWrappers.splice(index, 1);\n        }\n      }\n    }\n  }\n  eject() {\n    this.setHealthy(false);\n  }\n  uneject() {\n    this.setHealthy(true);\n  }\n  getMapEntry() {\n    return this.mapEntry;\n  }\n  getWrappedSubchannel() {\n    return this.child;\n  }\n}\nfunction createEmptyBucket() {\n  return {\n    success: 0,\n    failure: 0\n  };\n}\nclass CallCounter {\n  constructor() {\n    this.activeBucket = createEmptyBucket();\n    this.inactiveBucket = createEmptyBucket();\n  }\n  addSuccess() {\n    this.activeBucket.success += 1;\n  }\n  addFailure() {\n    this.activeBucket.failure += 1;\n  }\n  switchBuckets() {\n    this.inactiveBucket = this.activeBucket;\n    this.activeBucket = createEmptyBucket();\n  }\n  getLastSuccesses() {\n    return this.inactiveBucket.success;\n  }\n  getLastFailures() {\n    return this.inactiveBucket.failure;\n  }\n}\nclass OutlierDetectionPicker {\n  constructor(wrappedPicker, countCalls) {\n    this.wrappedPicker = wrappedPicker;\n    this.countCalls = countCalls;\n  }\n  pick(pickArgs) {\n    const wrappedPick = this.wrappedPicker.pick(pickArgs);\n    if (wrappedPick.pickResultType === picker_1.PickResultType.COMPLETE) {\n      const subchannelWrapper = wrappedPick.subchannel;\n      const mapEntry = subchannelWrapper.getMapEntry();\n      if (mapEntry) {\n        let onCallEnded = wrappedPick.onCallEnded;\n        if (this.countCalls) {\n          onCallEnded = statusCode => {\n            var _a;\n            if (statusCode === constants_1.Status.OK) {\n              mapEntry.counter.addSuccess();\n            } else {\n              mapEntry.counter.addFailure();\n            }\n            (_a = wrappedPick.onCallEnded) === null || _a === void 0 ? void 0 : _a.call(wrappedPick, statusCode);\n          };\n        }\n        return Object.assign(Object.assign({}, wrappedPick), {\n          subchannel: subchannelWrapper.getWrappedSubchannel(),\n          onCallEnded: onCallEnded\n        });\n      } else {\n        return Object.assign(Object.assign({}, wrappedPick), {\n          subchannel: subchannelWrapper.getWrappedSubchannel()\n        });\n      }\n    } else {\n      return wrappedPick;\n    }\n  }\n}\nclass OutlierDetectionLoadBalancer {\n  constructor(channelControlHelper, options) {\n    this.entryMap = new subchannel_address_1.EndpointMap();\n    this.latestConfig = null;\n    this.timerStartTime = null;\n    this.childBalancer = new load_balancer_child_handler_1.ChildLoadBalancerHandler((0, experimental_1.createChildChannelControlHelper)(channelControlHelper, {\n      createSubchannel: (subchannelAddress, subchannelArgs) => {\n        const originalSubchannel = channelControlHelper.createSubchannel(subchannelAddress, subchannelArgs);\n        const mapEntry = this.entryMap.getForSubchannelAddress(subchannelAddress);\n        const subchannelWrapper = new OutlierDetectionSubchannelWrapper(originalSubchannel, mapEntry);\n        if ((mapEntry === null || mapEntry === void 0 ? void 0 : mapEntry.currentEjectionTimestamp) !== null) {\n          // If the address is ejected, propagate that to the new subchannel wrapper\n          subchannelWrapper.eject();\n        }\n        mapEntry === null || mapEntry === void 0 ? void 0 : mapEntry.subchannelWrappers.push(subchannelWrapper);\n        return subchannelWrapper;\n      },\n      updateState: (connectivityState, picker) => {\n        if (connectivityState === connectivity_state_1.ConnectivityState.READY) {\n          channelControlHelper.updateState(connectivityState, new OutlierDetectionPicker(picker, this.isCountingEnabled()));\n        } else {\n          channelControlHelper.updateState(connectivityState, picker);\n        }\n      }\n    }), options);\n    this.ejectionTimer = setInterval(() => {}, 0);\n    clearInterval(this.ejectionTimer);\n  }\n  isCountingEnabled() {\n    return this.latestConfig !== null && (this.latestConfig.getSuccessRateEjectionConfig() !== null || this.latestConfig.getFailurePercentageEjectionConfig() !== null);\n  }\n  getCurrentEjectionPercent() {\n    let ejectionCount = 0;\n    for (const mapEntry of this.entryMap.values()) {\n      if (mapEntry.currentEjectionTimestamp !== null) {\n        ejectionCount += 1;\n      }\n    }\n    return ejectionCount * 100 / this.entryMap.size;\n  }\n  runSuccessRateCheck(ejectionTimestamp) {\n    if (!this.latestConfig) {\n      return;\n    }\n    const successRateConfig = this.latestConfig.getSuccessRateEjectionConfig();\n    if (!successRateConfig) {\n      return;\n    }\n    trace('Running success rate check');\n    // Step 1\n    const targetRequestVolume = successRateConfig.request_volume;\n    let addresesWithTargetVolume = 0;\n    const successRates = [];\n    for (const [endpoint, mapEntry] of this.entryMap.entries()) {\n      const successes = mapEntry.counter.getLastSuccesses();\n      const failures = mapEntry.counter.getLastFailures();\n      trace('Stats for ' + (0, subchannel_address_1.endpointToString)(endpoint) + ': successes=' + successes + ' failures=' + failures + ' targetRequestVolume=' + targetRequestVolume);\n      if (successes + failures >= targetRequestVolume) {\n        addresesWithTargetVolume += 1;\n        successRates.push(successes / (successes + failures));\n      }\n    }\n    trace('Found ' + addresesWithTargetVolume + ' success rate candidates; currentEjectionPercent=' + this.getCurrentEjectionPercent() + ' successRates=[' + successRates + ']');\n    if (addresesWithTargetVolume < successRateConfig.minimum_hosts) {\n      return;\n    }\n    // Step 2\n    const successRateMean = successRates.reduce((a, b) => a + b) / successRates.length;\n    let successRateDeviationSum = 0;\n    for (const rate of successRates) {\n      const deviation = rate - successRateMean;\n      successRateDeviationSum += deviation * deviation;\n    }\n    const successRateVariance = successRateDeviationSum / successRates.length;\n    const successRateStdev = Math.sqrt(successRateVariance);\n    const ejectionThreshold = successRateMean - successRateStdev * (successRateConfig.stdev_factor / 1000);\n    trace('stdev=' + successRateStdev + ' ejectionThreshold=' + ejectionThreshold);\n    // Step 3\n    for (const [address, mapEntry] of this.entryMap.entries()) {\n      // Step 3.i\n      if (this.getCurrentEjectionPercent() >= this.latestConfig.getMaxEjectionPercent()) {\n        break;\n      }\n      // Step 3.ii\n      const successes = mapEntry.counter.getLastSuccesses();\n      const failures = mapEntry.counter.getLastFailures();\n      if (successes + failures < targetRequestVolume) {\n        continue;\n      }\n      // Step 3.iii\n      const successRate = successes / (successes + failures);\n      trace('Checking candidate ' + address + ' successRate=' + successRate);\n      if (successRate < ejectionThreshold) {\n        const randomNumber = Math.random() * 100;\n        trace('Candidate ' + address + ' randomNumber=' + randomNumber + ' enforcement_percentage=' + successRateConfig.enforcement_percentage);\n        if (randomNumber < successRateConfig.enforcement_percentage) {\n          trace('Ejecting candidate ' + address);\n          this.eject(mapEntry, ejectionTimestamp);\n        }\n      }\n    }\n  }\n  runFailurePercentageCheck(ejectionTimestamp) {\n    if (!this.latestConfig) {\n      return;\n    }\n    const failurePercentageConfig = this.latestConfig.getFailurePercentageEjectionConfig();\n    if (!failurePercentageConfig) {\n      return;\n    }\n    trace('Running failure percentage check. threshold=' + failurePercentageConfig.threshold + ' request volume threshold=' + failurePercentageConfig.request_volume);\n    // Step 1\n    let addressesWithTargetVolume = 0;\n    for (const mapEntry of this.entryMap.values()) {\n      const successes = mapEntry.counter.getLastSuccesses();\n      const failures = mapEntry.counter.getLastFailures();\n      if (successes + failures >= failurePercentageConfig.request_volume) {\n        addressesWithTargetVolume += 1;\n      }\n    }\n    if (addressesWithTargetVolume < failurePercentageConfig.minimum_hosts) {\n      return;\n    }\n    // Step 2\n    for (const [address, mapEntry] of this.entryMap.entries()) {\n      // Step 2.i\n      if (this.getCurrentEjectionPercent() >= this.latestConfig.getMaxEjectionPercent()) {\n        break;\n      }\n      // Step 2.ii\n      const successes = mapEntry.counter.getLastSuccesses();\n      const failures = mapEntry.counter.getLastFailures();\n      trace('Candidate successes=' + successes + ' failures=' + failures);\n      if (successes + failures < failurePercentageConfig.request_volume) {\n        continue;\n      }\n      // Step 2.iii\n      const failurePercentage = failures * 100 / (failures + successes);\n      if (failurePercentage > failurePercentageConfig.threshold) {\n        const randomNumber = Math.random() * 100;\n        trace('Candidate ' + address + ' randomNumber=' + randomNumber + ' enforcement_percentage=' + failurePercentageConfig.enforcement_percentage);\n        if (randomNumber < failurePercentageConfig.enforcement_percentage) {\n          trace('Ejecting candidate ' + address);\n          this.eject(mapEntry, ejectionTimestamp);\n        }\n      }\n    }\n  }\n  eject(mapEntry, ejectionTimestamp) {\n    mapEntry.currentEjectionTimestamp = new Date();\n    mapEntry.ejectionTimeMultiplier += 1;\n    for (const subchannelWrapper of mapEntry.subchannelWrappers) {\n      subchannelWrapper.eject();\n    }\n  }\n  uneject(mapEntry) {\n    mapEntry.currentEjectionTimestamp = null;\n    for (const subchannelWrapper of mapEntry.subchannelWrappers) {\n      subchannelWrapper.uneject();\n    }\n  }\n  switchAllBuckets() {\n    for (const mapEntry of this.entryMap.values()) {\n      mapEntry.counter.switchBuckets();\n    }\n  }\n  startTimer(delayMs) {\n    var _a, _b;\n    this.ejectionTimer = setTimeout(() => this.runChecks(), delayMs);\n    (_b = (_a = this.ejectionTimer).unref) === null || _b === void 0 ? void 0 : _b.call(_a);\n  }\n  runChecks() {\n    const ejectionTimestamp = new Date();\n    trace('Ejection timer running');\n    this.switchAllBuckets();\n    if (!this.latestConfig) {\n      return;\n    }\n    this.timerStartTime = ejectionTimestamp;\n    this.startTimer(this.latestConfig.getIntervalMs());\n    this.runSuccessRateCheck(ejectionTimestamp);\n    this.runFailurePercentageCheck(ejectionTimestamp);\n    for (const [address, mapEntry] of this.entryMap.entries()) {\n      if (mapEntry.currentEjectionTimestamp === null) {\n        if (mapEntry.ejectionTimeMultiplier > 0) {\n          mapEntry.ejectionTimeMultiplier -= 1;\n        }\n      } else {\n        const baseEjectionTimeMs = this.latestConfig.getBaseEjectionTimeMs();\n        const maxEjectionTimeMs = this.latestConfig.getMaxEjectionTimeMs();\n        const returnTime = new Date(mapEntry.currentEjectionTimestamp.getTime());\n        returnTime.setMilliseconds(returnTime.getMilliseconds() + Math.min(baseEjectionTimeMs * mapEntry.ejectionTimeMultiplier, Math.max(baseEjectionTimeMs, maxEjectionTimeMs)));\n        if (returnTime < new Date()) {\n          trace('Unejecting ' + address);\n          this.uneject(mapEntry);\n        }\n      }\n    }\n  }\n  updateAddressList(endpointList, lbConfig, attributes) {\n    if (!(lbConfig instanceof OutlierDetectionLoadBalancingConfig)) {\n      return;\n    }\n    for (const endpoint of endpointList) {\n      if (!this.entryMap.has(endpoint)) {\n        trace('Adding map entry for ' + (0, subchannel_address_1.endpointToString)(endpoint));\n        this.entryMap.set(endpoint, {\n          counter: new CallCounter(),\n          currentEjectionTimestamp: null,\n          ejectionTimeMultiplier: 0,\n          subchannelWrappers: []\n        });\n      }\n    }\n    this.entryMap.deleteMissing(endpointList);\n    const childPolicy = lbConfig.getChildPolicy();\n    this.childBalancer.updateAddressList(endpointList, childPolicy, attributes);\n    if (lbConfig.getSuccessRateEjectionConfig() || lbConfig.getFailurePercentageEjectionConfig()) {\n      if (this.timerStartTime) {\n        trace('Previous timer existed. Replacing timer');\n        clearTimeout(this.ejectionTimer);\n        const remainingDelay = lbConfig.getIntervalMs() - (new Date().getTime() - this.timerStartTime.getTime());\n        this.startTimer(remainingDelay);\n      } else {\n        trace('Starting new timer');\n        this.timerStartTime = new Date();\n        this.startTimer(lbConfig.getIntervalMs());\n        this.switchAllBuckets();\n      }\n    } else {\n      trace('Counting disabled. Cancelling timer.');\n      this.timerStartTime = null;\n      clearTimeout(this.ejectionTimer);\n      for (const mapEntry of this.entryMap.values()) {\n        this.uneject(mapEntry);\n        mapEntry.ejectionTimeMultiplier = 0;\n      }\n    }\n    this.latestConfig = lbConfig;\n  }\n  exitIdle() {\n    this.childBalancer.exitIdle();\n  }\n  resetBackoff() {\n    this.childBalancer.resetBackoff();\n  }\n  destroy() {\n    clearTimeout(this.ejectionTimer);\n    this.childBalancer.destroy();\n  }\n  getTypeName() {\n    return TYPE_NAME;\n  }\n}\nexports.OutlierDetectionLoadBalancer = OutlierDetectionLoadBalancer;\nfunction setup() {\n  if (OUTLIER_DETECTION_ENABLED) {\n    (0, experimental_1.registerLoadBalancerType)(TYPE_NAME, OutlierDetectionLoadBalancer, OutlierDetectionLoadBalancingConfig);\n  }\n}\nexports.setup = setup;","map":{"version":3,"names":["connectivity_state_1","require","constants_1","duration_1","experimental_1","load_balancer_1","load_balancer_child_handler_1","picker_1","subchannel_address_1","subchannel_interface_1","logging","TRACER_NAME","trace","text","LogVerbosity","DEBUG","TYPE_NAME","OUTLIER_DETECTION_ENABLED","_a","process","env","GRPC_EXPERIMENTAL_ENABLE_OUTLIER_DETECTION","defaultSuccessRateEjectionConfig","stdev_factor","enforcement_percentage","minimum_hosts","request_volume","defaultFailurePercentageEjectionConfig","threshold","validateFieldType","obj","fieldName","expectedType","objectName","undefined","fullFieldName","Error","validatePositiveDuration","isDuration","seconds","nanos","validatePercentage","OutlierDetectionLoadBalancingConfig","constructor","intervalMs","baseEjectionTimeMs","maxEjectionTimeMs","maxEjectionPercent","successRateEjection","failurePercentageEjection","childPolicy","getLoadBalancerName","Object","assign","toJsonObject","outlier_detection","interval","msToDuration","base_ejection_time","max_ejection_time","max_ejection_percent","success_rate_ejection","failure_percentage_ejection","_b","child_policy","getIntervalMs","getBaseEjectionTimeMs","getMaxEjectionTimeMs","getMaxEjectionPercent","getSuccessRateEjectionConfig","getFailurePercentageEjectionConfig","getChildPolicy","createFromJson","Array","isArray","selectLbConfigFromList","durationToMs","exports","OutlierDetectionSubchannelWrapper","BaseSubchannelWrapper","childSubchannel","mapEntry","refCount","ref","child","unref","index","subchannelWrappers","indexOf","splice","eject","setHealthy","uneject","getMapEntry","getWrappedSubchannel","createEmptyBucket","success","failure","CallCounter","activeBucket","inactiveBucket","addSuccess","addFailure","switchBuckets","getLastSuccesses","getLastFailures","OutlierDetectionPicker","wrappedPicker","countCalls","pick","pickArgs","wrappedPick","pickResultType","PickResultType","COMPLETE","subchannelWrapper","subchannel","onCallEnded","statusCode","Status","OK","counter","call","OutlierDetectionLoadBalancer","channelControlHelper","options","entryMap","EndpointMap","latestConfig","timerStartTime","childBalancer","ChildLoadBalancerHandler","createChildChannelControlHelper","createSubchannel","subchannelAddress","subchannelArgs","originalSubchannel","getForSubchannelAddress","currentEjectionTimestamp","push","updateState","connectivityState","picker","ConnectivityState","READY","isCountingEnabled","ejectionTimer","setInterval","clearInterval","getCurrentEjectionPercent","ejectionCount","values","size","runSuccessRateCheck","ejectionTimestamp","successRateConfig","targetRequestVolume","addresesWithTargetVolume","successRates","endpoint","entries","successes","failures","endpointToString","successRateMean","reduce","a","b","length","successRateDeviationSum","rate","deviation","successRateVariance","successRateStdev","Math","sqrt","ejectionThreshold","address","successRate","randomNumber","random","runFailurePercentageCheck","failurePercentageConfig","addressesWithTargetVolume","failurePercentage","Date","ejectionTimeMultiplier","switchAllBuckets","startTimer","delayMs","setTimeout","runChecks","returnTime","getTime","setMilliseconds","getMilliseconds","min","max","updateAddressList","endpointList","lbConfig","attributes","has","set","deleteMissing","clearTimeout","remainingDelay","exitIdle","resetBackoff","destroy","getTypeName","setup","registerLoadBalancerType"],"sources":["/Users/husseinmohamed/Desktop/Learn_Rust/projects/grpc-project/client-grpc-messaging/node_modules/@grpc/grpc-js/src/load-balancer-outlier-detection.ts"],"sourcesContent":["/*\n * Copyright 2022 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\n\nimport { ChannelOptions } from './channel-options';\nimport { ConnectivityState } from './connectivity-state';\nimport { LogVerbosity, Status } from './constants';\nimport { Duration, durationToMs, isDuration, msToDuration } from './duration';\nimport {\n  ChannelControlHelper,\n  createChildChannelControlHelper,\n  registerLoadBalancerType,\n} from './experimental';\nimport {\n  selectLbConfigFromList,\n  LoadBalancer,\n  TypedLoadBalancingConfig,\n} from './load-balancer';\nimport { ChildLoadBalancerHandler } from './load-balancer-child-handler';\nimport { PickArgs, Picker, PickResult, PickResultType } from './picker';\nimport {\n  Endpoint,\n  EndpointMap,\n  SubchannelAddress,\n  endpointToString,\n} from './subchannel-address';\nimport {\n  BaseSubchannelWrapper,\n  SubchannelInterface,\n} from './subchannel-interface';\nimport * as logging from './logging';\nimport { LoadBalancingConfig } from './service-config';\n\nconst TRACER_NAME = 'outlier_detection';\n\nfunction trace(text: string): void {\n  logging.trace(LogVerbosity.DEBUG, TRACER_NAME, text);\n}\n\nconst TYPE_NAME = 'outlier_detection';\n\nconst OUTLIER_DETECTION_ENABLED =\n  (process.env.GRPC_EXPERIMENTAL_ENABLE_OUTLIER_DETECTION ?? 'true') === 'true';\n\nexport interface SuccessRateEjectionConfig {\n  readonly stdev_factor: number;\n  readonly enforcement_percentage: number;\n  readonly minimum_hosts: number;\n  readonly request_volume: number;\n}\n\nexport interface FailurePercentageEjectionConfig {\n  readonly threshold: number;\n  readonly enforcement_percentage: number;\n  readonly minimum_hosts: number;\n  readonly request_volume: number;\n}\n\nexport interface OutlierDetectionRawConfig {\n  interval?: Duration;\n  base_ejection_time?: Duration;\n  max_ejection_time?: Duration;\n  max_ejection_percent?: number;\n  success_rate_ejection?: Partial<SuccessRateEjectionConfig>;\n  failure_percentage_ejection?: Partial<FailurePercentageEjectionConfig>;\n  child_policy: LoadBalancingConfig[];\n}\n\nconst defaultSuccessRateEjectionConfig: SuccessRateEjectionConfig = {\n  stdev_factor: 1900,\n  enforcement_percentage: 100,\n  minimum_hosts: 5,\n  request_volume: 100,\n};\n\nconst defaultFailurePercentageEjectionConfig: FailurePercentageEjectionConfig =\n  {\n    threshold: 85,\n    enforcement_percentage: 100,\n    minimum_hosts: 5,\n    request_volume: 50,\n  };\n\ntype TypeofValues =\n  | 'object'\n  | 'boolean'\n  | 'function'\n  | 'number'\n  | 'string'\n  | 'undefined';\n\nfunction validateFieldType(\n  obj: any,\n  fieldName: string,\n  expectedType: TypeofValues,\n  objectName?: string\n) {\n  if (\n    fieldName in obj &&\n    obj[fieldName] !== undefined &&\n    typeof obj[fieldName] !== expectedType\n  ) {\n    const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n    throw new Error(\n      `outlier detection config ${fullFieldName} parse error: expected ${expectedType}, got ${typeof obj[\n        fieldName\n      ]}`\n    );\n  }\n}\n\nfunction validatePositiveDuration(\n  obj: any,\n  fieldName: string,\n  objectName?: string\n) {\n  const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n  if (fieldName in obj && obj[fieldName] !== undefined) {\n    if (!isDuration(obj[fieldName])) {\n      throw new Error(\n        `outlier detection config ${fullFieldName} parse error: expected Duration, got ${typeof obj[\n          fieldName\n        ]}`\n      );\n    }\n    if (\n      !(\n        obj[fieldName].seconds >= 0 &&\n        obj[fieldName].seconds <= 315_576_000_000 &&\n        obj[fieldName].nanos >= 0 &&\n        obj[fieldName].nanos <= 999_999_999\n      )\n    ) {\n      throw new Error(\n        `outlier detection config ${fullFieldName} parse error: values out of range for non-negative Duaration`\n      );\n    }\n  }\n}\n\nfunction validatePercentage(obj: any, fieldName: string, objectName?: string) {\n  const fullFieldName = objectName ? `${objectName}.${fieldName}` : fieldName;\n  validateFieldType(obj, fieldName, 'number', objectName);\n  if (\n    fieldName in obj &&\n    obj[fieldName] !== undefined &&\n    !(obj[fieldName] >= 0 && obj[fieldName] <= 100)\n  ) {\n    throw new Error(\n      `outlier detection config ${fullFieldName} parse error: value out of range for percentage (0-100)`\n    );\n  }\n}\n\nexport class OutlierDetectionLoadBalancingConfig\n  implements TypedLoadBalancingConfig\n{\n  private readonly intervalMs: number;\n  private readonly baseEjectionTimeMs: number;\n  private readonly maxEjectionTimeMs: number;\n  private readonly maxEjectionPercent: number;\n  private readonly successRateEjection: SuccessRateEjectionConfig | null;\n  private readonly failurePercentageEjection: FailurePercentageEjectionConfig | null;\n\n  constructor(\n    intervalMs: number | null,\n    baseEjectionTimeMs: number | null,\n    maxEjectionTimeMs: number | null,\n    maxEjectionPercent: number | null,\n    successRateEjection: Partial<SuccessRateEjectionConfig> | null,\n    failurePercentageEjection: Partial<FailurePercentageEjectionConfig> | null,\n    private readonly childPolicy: TypedLoadBalancingConfig\n  ) {\n    if (childPolicy.getLoadBalancerName() === 'pick_first') {\n      throw new Error(\n        'outlier_detection LB policy cannot have a pick_first child policy'\n      );\n    }\n    this.intervalMs = intervalMs ?? 10_000;\n    this.baseEjectionTimeMs = baseEjectionTimeMs ?? 30_000;\n    this.maxEjectionTimeMs = maxEjectionTimeMs ?? 300_000;\n    this.maxEjectionPercent = maxEjectionPercent ?? 10;\n    this.successRateEjection = successRateEjection\n      ? { ...defaultSuccessRateEjectionConfig, ...successRateEjection }\n      : null;\n    this.failurePercentageEjection = failurePercentageEjection\n      ? {\n          ...defaultFailurePercentageEjectionConfig,\n          ...failurePercentageEjection,\n        }\n      : null;\n  }\n  getLoadBalancerName(): string {\n    return TYPE_NAME;\n  }\n  toJsonObject(): object {\n    return {\n      outlier_detection: {\n        interval: msToDuration(this.intervalMs),\n        base_ejection_time: msToDuration(this.baseEjectionTimeMs),\n        max_ejection_time: msToDuration(this.maxEjectionTimeMs),\n        max_ejection_percent: this.maxEjectionPercent,\n        success_rate_ejection: this.successRateEjection ?? undefined,\n        failure_percentage_ejection:\n          this.failurePercentageEjection ?? undefined,\n        child_policy: [this.childPolicy.toJsonObject()],\n      },\n    };\n  }\n\n  getIntervalMs(): number {\n    return this.intervalMs;\n  }\n  getBaseEjectionTimeMs(): number {\n    return this.baseEjectionTimeMs;\n  }\n  getMaxEjectionTimeMs(): number {\n    return this.maxEjectionTimeMs;\n  }\n  getMaxEjectionPercent(): number {\n    return this.maxEjectionPercent;\n  }\n  getSuccessRateEjectionConfig(): SuccessRateEjectionConfig | null {\n    return this.successRateEjection;\n  }\n  getFailurePercentageEjectionConfig(): FailurePercentageEjectionConfig | null {\n    return this.failurePercentageEjection;\n  }\n  getChildPolicy(): TypedLoadBalancingConfig {\n    return this.childPolicy;\n  }\n\n  static createFromJson(obj: any): OutlierDetectionLoadBalancingConfig {\n    validatePositiveDuration(obj, 'interval');\n    validatePositiveDuration(obj, 'base_ejection_time');\n    validatePositiveDuration(obj, 'max_ejection_time');\n    validatePercentage(obj, 'max_ejection_percent');\n    if (\n      'success_rate_ejection' in obj &&\n      obj.success_rate_ejection !== undefined\n    ) {\n      if (typeof obj.success_rate_ejection !== 'object') {\n        throw new Error(\n          'outlier detection config success_rate_ejection must be an object'\n        );\n      }\n      validateFieldType(\n        obj.success_rate_ejection,\n        'stdev_factor',\n        'number',\n        'success_rate_ejection'\n      );\n      validatePercentage(\n        obj.success_rate_ejection,\n        'enforcement_percentage',\n        'success_rate_ejection'\n      );\n      validateFieldType(\n        obj.success_rate_ejection,\n        'minimum_hosts',\n        'number',\n        'success_rate_ejection'\n      );\n      validateFieldType(\n        obj.success_rate_ejection,\n        'request_volume',\n        'number',\n        'success_rate_ejection'\n      );\n    }\n    if (\n      'failure_percentage_ejection' in obj &&\n      obj.failure_percentage_ejection !== undefined\n    ) {\n      if (typeof obj.failure_percentage_ejection !== 'object') {\n        throw new Error(\n          'outlier detection config failure_percentage_ejection must be an object'\n        );\n      }\n      validatePercentage(\n        obj.failure_percentage_ejection,\n        'threshold',\n        'failure_percentage_ejection'\n      );\n      validatePercentage(\n        obj.failure_percentage_ejection,\n        'enforcement_percentage',\n        'failure_percentage_ejection'\n      );\n      validateFieldType(\n        obj.failure_percentage_ejection,\n        'minimum_hosts',\n        'number',\n        'failure_percentage_ejection'\n      );\n      validateFieldType(\n        obj.failure_percentage_ejection,\n        'request_volume',\n        'number',\n        'failure_percentage_ejection'\n      );\n    }\n\n    if (!('child_policy' in obj) || !Array.isArray(obj.child_policy)) {\n      throw new Error('outlier detection config child_policy must be an array');\n    }\n    const childPolicy = selectLbConfigFromList(obj.child_policy);\n    if (!childPolicy) {\n      throw new Error(\n        'outlier detection config child_policy: no valid recognized policy found'\n      );\n    }\n\n    return new OutlierDetectionLoadBalancingConfig(\n      obj.interval ? durationToMs(obj.interval) : null,\n      obj.base_ejection_time ? durationToMs(obj.base_ejection_time) : null,\n      obj.max_ejection_time ? durationToMs(obj.max_ejection_time) : null,\n      obj.max_ejection_percent ?? null,\n      obj.success_rate_ejection,\n      obj.failure_percentage_ejection,\n      childPolicy\n    );\n  }\n}\n\nclass OutlierDetectionSubchannelWrapper\n  extends BaseSubchannelWrapper\n  implements SubchannelInterface\n{\n  private refCount = 0;\n  constructor(\n    childSubchannel: SubchannelInterface,\n    private mapEntry?: MapEntry\n  ) {\n    super(childSubchannel);\n  }\n\n  ref() {\n    this.child.ref();\n    this.refCount += 1;\n  }\n\n  unref() {\n    this.child.unref();\n    this.refCount -= 1;\n    if (this.refCount <= 0) {\n      if (this.mapEntry) {\n        const index = this.mapEntry.subchannelWrappers.indexOf(this);\n        if (index >= 0) {\n          this.mapEntry.subchannelWrappers.splice(index, 1);\n        }\n      }\n    }\n  }\n\n  eject() {\n    this.setHealthy(false);\n  }\n\n  uneject() {\n    this.setHealthy(true);\n  }\n\n  getMapEntry(): MapEntry | undefined {\n    return this.mapEntry;\n  }\n\n  getWrappedSubchannel(): SubchannelInterface {\n    return this.child;\n  }\n}\n\ninterface CallCountBucket {\n  success: number;\n  failure: number;\n}\n\nfunction createEmptyBucket(): CallCountBucket {\n  return {\n    success: 0,\n    failure: 0,\n  };\n}\n\nclass CallCounter {\n  private activeBucket: CallCountBucket = createEmptyBucket();\n  private inactiveBucket: CallCountBucket = createEmptyBucket();\n  addSuccess() {\n    this.activeBucket.success += 1;\n  }\n  addFailure() {\n    this.activeBucket.failure += 1;\n  }\n  switchBuckets() {\n    this.inactiveBucket = this.activeBucket;\n    this.activeBucket = createEmptyBucket();\n  }\n  getLastSuccesses() {\n    return this.inactiveBucket.success;\n  }\n  getLastFailures() {\n    return this.inactiveBucket.failure;\n  }\n}\n\nclass OutlierDetectionPicker implements Picker {\n  constructor(private wrappedPicker: Picker, private countCalls: boolean) {}\n  pick(pickArgs: PickArgs): PickResult {\n    const wrappedPick = this.wrappedPicker.pick(pickArgs);\n    if (wrappedPick.pickResultType === PickResultType.COMPLETE) {\n      const subchannelWrapper =\n        wrappedPick.subchannel as OutlierDetectionSubchannelWrapper;\n      const mapEntry = subchannelWrapper.getMapEntry();\n      if (mapEntry) {\n        let onCallEnded = wrappedPick.onCallEnded;\n        if (this.countCalls) {\n          onCallEnded = statusCode => {\n            if (statusCode === Status.OK) {\n              mapEntry.counter.addSuccess();\n            } else {\n              mapEntry.counter.addFailure();\n            }\n            wrappedPick.onCallEnded?.(statusCode);\n          };\n        }\n        return {\n          ...wrappedPick,\n          subchannel: subchannelWrapper.getWrappedSubchannel(),\n          onCallEnded: onCallEnded,\n        };\n      } else {\n        return {\n          ...wrappedPick,\n          subchannel: subchannelWrapper.getWrappedSubchannel(),\n        };\n      }\n    } else {\n      return wrappedPick;\n    }\n  }\n}\n\ninterface MapEntry {\n  counter: CallCounter;\n  currentEjectionTimestamp: Date | null;\n  ejectionTimeMultiplier: number;\n  subchannelWrappers: OutlierDetectionSubchannelWrapper[];\n}\n\nexport class OutlierDetectionLoadBalancer implements LoadBalancer {\n  private childBalancer: ChildLoadBalancerHandler;\n  private entryMap = new EndpointMap<MapEntry>();\n  private latestConfig: OutlierDetectionLoadBalancingConfig | null = null;\n  private ejectionTimer: NodeJS.Timeout;\n  private timerStartTime: Date | null = null;\n\n  constructor(\n    channelControlHelper: ChannelControlHelper,\n    options: ChannelOptions\n  ) {\n    this.childBalancer = new ChildLoadBalancerHandler(\n      createChildChannelControlHelper(channelControlHelper, {\n        createSubchannel: (\n          subchannelAddress: SubchannelAddress,\n          subchannelArgs: ChannelOptions\n        ) => {\n          const originalSubchannel = channelControlHelper.createSubchannel(\n            subchannelAddress,\n            subchannelArgs\n          );\n          const mapEntry =\n            this.entryMap.getForSubchannelAddress(subchannelAddress);\n          const subchannelWrapper = new OutlierDetectionSubchannelWrapper(\n            originalSubchannel,\n            mapEntry\n          );\n          if (mapEntry?.currentEjectionTimestamp !== null) {\n            // If the address is ejected, propagate that to the new subchannel wrapper\n            subchannelWrapper.eject();\n          }\n          mapEntry?.subchannelWrappers.push(subchannelWrapper);\n          return subchannelWrapper;\n        },\n        updateState: (connectivityState: ConnectivityState, picker: Picker) => {\n          if (connectivityState === ConnectivityState.READY) {\n            channelControlHelper.updateState(\n              connectivityState,\n              new OutlierDetectionPicker(picker, this.isCountingEnabled())\n            );\n          } else {\n            channelControlHelper.updateState(connectivityState, picker);\n          }\n        },\n      }),\n      options\n    );\n    this.ejectionTimer = setInterval(() => {}, 0);\n    clearInterval(this.ejectionTimer);\n  }\n\n  private isCountingEnabled(): boolean {\n    return (\n      this.latestConfig !== null &&\n      (this.latestConfig.getSuccessRateEjectionConfig() !== null ||\n        this.latestConfig.getFailurePercentageEjectionConfig() !== null)\n    );\n  }\n\n  private getCurrentEjectionPercent() {\n    let ejectionCount = 0;\n    for (const mapEntry of this.entryMap.values()) {\n      if (mapEntry.currentEjectionTimestamp !== null) {\n        ejectionCount += 1;\n      }\n    }\n    return (ejectionCount * 100) / this.entryMap.size;\n  }\n\n  private runSuccessRateCheck(ejectionTimestamp: Date) {\n    if (!this.latestConfig) {\n      return;\n    }\n    const successRateConfig = this.latestConfig.getSuccessRateEjectionConfig();\n    if (!successRateConfig) {\n      return;\n    }\n    trace('Running success rate check');\n    // Step 1\n    const targetRequestVolume = successRateConfig.request_volume;\n    let addresesWithTargetVolume = 0;\n    const successRates: number[] = [];\n    for (const [endpoint, mapEntry] of this.entryMap.entries()) {\n      const successes = mapEntry.counter.getLastSuccesses();\n      const failures = mapEntry.counter.getLastFailures();\n      trace(\n        'Stats for ' +\n          endpointToString(endpoint) +\n          ': successes=' +\n          successes +\n          ' failures=' +\n          failures +\n          ' targetRequestVolume=' +\n          targetRequestVolume\n      );\n      if (successes + failures >= targetRequestVolume) {\n        addresesWithTargetVolume += 1;\n        successRates.push(successes / (successes + failures));\n      }\n    }\n    trace(\n      'Found ' +\n        addresesWithTargetVolume +\n        ' success rate candidates; currentEjectionPercent=' +\n        this.getCurrentEjectionPercent() +\n        ' successRates=[' +\n        successRates +\n        ']'\n    );\n    if (addresesWithTargetVolume < successRateConfig.minimum_hosts) {\n      return;\n    }\n\n    // Step 2\n    const successRateMean =\n      successRates.reduce((a, b) => a + b) / successRates.length;\n    let successRateDeviationSum = 0;\n    for (const rate of successRates) {\n      const deviation = rate - successRateMean;\n      successRateDeviationSum += deviation * deviation;\n    }\n    const successRateVariance = successRateDeviationSum / successRates.length;\n    const successRateStdev = Math.sqrt(successRateVariance);\n    const ejectionThreshold =\n      successRateMean -\n      successRateStdev * (successRateConfig.stdev_factor / 1000);\n    trace(\n      'stdev=' + successRateStdev + ' ejectionThreshold=' + ejectionThreshold\n    );\n\n    // Step 3\n    for (const [address, mapEntry] of this.entryMap.entries()) {\n      // Step 3.i\n      if (\n        this.getCurrentEjectionPercent() >=\n        this.latestConfig.getMaxEjectionPercent()\n      ) {\n        break;\n      }\n      // Step 3.ii\n      const successes = mapEntry.counter.getLastSuccesses();\n      const failures = mapEntry.counter.getLastFailures();\n      if (successes + failures < targetRequestVolume) {\n        continue;\n      }\n      // Step 3.iii\n      const successRate = successes / (successes + failures);\n      trace('Checking candidate ' + address + ' successRate=' + successRate);\n      if (successRate < ejectionThreshold) {\n        const randomNumber = Math.random() * 100;\n        trace(\n          'Candidate ' +\n            address +\n            ' randomNumber=' +\n            randomNumber +\n            ' enforcement_percentage=' +\n            successRateConfig.enforcement_percentage\n        );\n        if (randomNumber < successRateConfig.enforcement_percentage) {\n          trace('Ejecting candidate ' + address);\n          this.eject(mapEntry, ejectionTimestamp);\n        }\n      }\n    }\n  }\n\n  private runFailurePercentageCheck(ejectionTimestamp: Date) {\n    if (!this.latestConfig) {\n      return;\n    }\n    const failurePercentageConfig =\n      this.latestConfig.getFailurePercentageEjectionConfig();\n    if (!failurePercentageConfig) {\n      return;\n    }\n    trace(\n      'Running failure percentage check. threshold=' +\n        failurePercentageConfig.threshold +\n        ' request volume threshold=' +\n        failurePercentageConfig.request_volume\n    );\n    // Step 1\n    let addressesWithTargetVolume = 0;\n    for (const mapEntry of this.entryMap.values()) {\n      const successes = mapEntry.counter.getLastSuccesses();\n      const failures = mapEntry.counter.getLastFailures();\n      if (successes + failures >= failurePercentageConfig.request_volume) {\n        addressesWithTargetVolume += 1;\n      }\n    }\n    if (addressesWithTargetVolume < failurePercentageConfig.minimum_hosts) {\n      return;\n    }\n\n    // Step 2\n    for (const [address, mapEntry] of this.entryMap.entries()) {\n      // Step 2.i\n      if (\n        this.getCurrentEjectionPercent() >=\n        this.latestConfig.getMaxEjectionPercent()\n      ) {\n        break;\n      }\n      // Step 2.ii\n      const successes = mapEntry.counter.getLastSuccesses();\n      const failures = mapEntry.counter.getLastFailures();\n      trace('Candidate successes=' + successes + ' failures=' + failures);\n      if (successes + failures < failurePercentageConfig.request_volume) {\n        continue;\n      }\n      // Step 2.iii\n      const failurePercentage = (failures * 100) / (failures + successes);\n      if (failurePercentage > failurePercentageConfig.threshold) {\n        const randomNumber = Math.random() * 100;\n        trace(\n          'Candidate ' +\n            address +\n            ' randomNumber=' +\n            randomNumber +\n            ' enforcement_percentage=' +\n            failurePercentageConfig.enforcement_percentage\n        );\n        if (randomNumber < failurePercentageConfig.enforcement_percentage) {\n          trace('Ejecting candidate ' + address);\n          this.eject(mapEntry, ejectionTimestamp);\n        }\n      }\n    }\n  }\n\n  private eject(mapEntry: MapEntry, ejectionTimestamp: Date) {\n    mapEntry.currentEjectionTimestamp = new Date();\n    mapEntry.ejectionTimeMultiplier += 1;\n    for (const subchannelWrapper of mapEntry.subchannelWrappers) {\n      subchannelWrapper.eject();\n    }\n  }\n\n  private uneject(mapEntry: MapEntry) {\n    mapEntry.currentEjectionTimestamp = null;\n    for (const subchannelWrapper of mapEntry.subchannelWrappers) {\n      subchannelWrapper.uneject();\n    }\n  }\n\n  private switchAllBuckets() {\n    for (const mapEntry of this.entryMap.values()) {\n      mapEntry.counter.switchBuckets();\n    }\n  }\n\n  private startTimer(delayMs: number) {\n    this.ejectionTimer = setTimeout(() => this.runChecks(), delayMs);\n    this.ejectionTimer.unref?.();\n  }\n\n  private runChecks() {\n    const ejectionTimestamp = new Date();\n    trace('Ejection timer running');\n\n    this.switchAllBuckets();\n\n    if (!this.latestConfig) {\n      return;\n    }\n    this.timerStartTime = ejectionTimestamp;\n    this.startTimer(this.latestConfig.getIntervalMs());\n\n    this.runSuccessRateCheck(ejectionTimestamp);\n    this.runFailurePercentageCheck(ejectionTimestamp);\n\n    for (const [address, mapEntry] of this.entryMap.entries()) {\n      if (mapEntry.currentEjectionTimestamp === null) {\n        if (mapEntry.ejectionTimeMultiplier > 0) {\n          mapEntry.ejectionTimeMultiplier -= 1;\n        }\n      } else {\n        const baseEjectionTimeMs = this.latestConfig.getBaseEjectionTimeMs();\n        const maxEjectionTimeMs = this.latestConfig.getMaxEjectionTimeMs();\n        const returnTime = new Date(\n          mapEntry.currentEjectionTimestamp.getTime()\n        );\n        returnTime.setMilliseconds(\n          returnTime.getMilliseconds() +\n            Math.min(\n              baseEjectionTimeMs * mapEntry.ejectionTimeMultiplier,\n              Math.max(baseEjectionTimeMs, maxEjectionTimeMs)\n            )\n        );\n        if (returnTime < new Date()) {\n          trace('Unejecting ' + address);\n          this.uneject(mapEntry);\n        }\n      }\n    }\n  }\n\n  updateAddressList(\n    endpointList: Endpoint[],\n    lbConfig: TypedLoadBalancingConfig,\n    attributes: { [key: string]: unknown }\n  ): void {\n    if (!(lbConfig instanceof OutlierDetectionLoadBalancingConfig)) {\n      return;\n    }\n    for (const endpoint of endpointList) {\n      if (!this.entryMap.has(endpoint)) {\n        trace('Adding map entry for ' + endpointToString(endpoint));\n        this.entryMap.set(endpoint, {\n          counter: new CallCounter(),\n          currentEjectionTimestamp: null,\n          ejectionTimeMultiplier: 0,\n          subchannelWrappers: [],\n        });\n      }\n    }\n    this.entryMap.deleteMissing(endpointList);\n    const childPolicy = lbConfig.getChildPolicy();\n    this.childBalancer.updateAddressList(endpointList, childPolicy, attributes);\n\n    if (\n      lbConfig.getSuccessRateEjectionConfig() ||\n      lbConfig.getFailurePercentageEjectionConfig()\n    ) {\n      if (this.timerStartTime) {\n        trace('Previous timer existed. Replacing timer');\n        clearTimeout(this.ejectionTimer);\n        const remainingDelay =\n          lbConfig.getIntervalMs() -\n          (new Date().getTime() - this.timerStartTime.getTime());\n        this.startTimer(remainingDelay);\n      } else {\n        trace('Starting new timer');\n        this.timerStartTime = new Date();\n        this.startTimer(lbConfig.getIntervalMs());\n        this.switchAllBuckets();\n      }\n    } else {\n      trace('Counting disabled. Cancelling timer.');\n      this.timerStartTime = null;\n      clearTimeout(this.ejectionTimer);\n      for (const mapEntry of this.entryMap.values()) {\n        this.uneject(mapEntry);\n        mapEntry.ejectionTimeMultiplier = 0;\n      }\n    }\n\n    this.latestConfig = lbConfig;\n  }\n  exitIdle(): void {\n    this.childBalancer.exitIdle();\n  }\n  resetBackoff(): void {\n    this.childBalancer.resetBackoff();\n  }\n  destroy(): void {\n    clearTimeout(this.ejectionTimer);\n    this.childBalancer.destroy();\n  }\n  getTypeName(): string {\n    return TYPE_NAME;\n  }\n}\n\nexport function setup() {\n  if (OUTLIER_DETECTION_ENABLED) {\n    registerLoadBalancerType(\n      TYPE_NAME,\n      OutlierDetectionLoadBalancer,\n      OutlierDetectionLoadBalancingConfig\n    );\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}