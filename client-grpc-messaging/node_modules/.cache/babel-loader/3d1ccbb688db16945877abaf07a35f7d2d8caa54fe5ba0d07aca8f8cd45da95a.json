{"ast":null,"code":"\"use strict\";\n\n/**\n * @license\n * Copyright 2018 gRPC authors.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n */\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.loadFileDescriptorSetFromObject = exports.loadFileDescriptorSetFromBuffer = exports.fromJSON = exports.loadSync = exports.load = exports.IdempotencyLevel = exports.isAnyExtension = exports.Long = void 0;\nconst camelCase = require(\"lodash.camelcase\");\nconst Protobuf = require(\"protobufjs\");\nconst descriptor = require(\"protobufjs/ext/descriptor\");\nconst util_1 = require(\"./util\");\nconst Long = require(\"long\");\nexports.Long = Long;\nfunction isAnyExtension(obj) {\n  return '@type' in obj && typeof obj['@type'] === 'string';\n}\nexports.isAnyExtension = isAnyExtension;\nvar IdempotencyLevel;\n(function (IdempotencyLevel) {\n  IdempotencyLevel[\"IDEMPOTENCY_UNKNOWN\"] = \"IDEMPOTENCY_UNKNOWN\";\n  IdempotencyLevel[\"NO_SIDE_EFFECTS\"] = \"NO_SIDE_EFFECTS\";\n  IdempotencyLevel[\"IDEMPOTENT\"] = \"IDEMPOTENT\";\n})(IdempotencyLevel = exports.IdempotencyLevel || (exports.IdempotencyLevel = {}));\nconst descriptorOptions = {\n  longs: String,\n  enums: String,\n  bytes: String,\n  defaults: true,\n  oneofs: true,\n  json: true\n};\nfunction joinName(baseName, name) {\n  if (baseName === '') {\n    return name;\n  } else {\n    return baseName + '.' + name;\n  }\n}\nfunction isHandledReflectionObject(obj) {\n  return obj instanceof Protobuf.Service || obj instanceof Protobuf.Type || obj instanceof Protobuf.Enum;\n}\nfunction isNamespaceBase(obj) {\n  return obj instanceof Protobuf.Namespace || obj instanceof Protobuf.Root;\n}\nfunction getAllHandledReflectionObjects(obj, parentName) {\n  const objName = joinName(parentName, obj.name);\n  if (isHandledReflectionObject(obj)) {\n    return [[objName, obj]];\n  } else {\n    if (isNamespaceBase(obj) && typeof obj.nested !== 'undefined') {\n      return Object.keys(obj.nested).map(name => {\n        return getAllHandledReflectionObjects(obj.nested[name], objName);\n      }).reduce((accumulator, currentValue) => accumulator.concat(currentValue), []);\n    }\n  }\n  return [];\n}\nfunction createDeserializer(cls, options) {\n  return function deserialize(argBuf) {\n    return cls.toObject(cls.decode(argBuf), options);\n  };\n}\nfunction createSerializer(cls) {\n  return function serialize(arg) {\n    if (Array.isArray(arg)) {\n      throw new Error(`Failed to serialize message: expected object with ${cls.name} structure, got array instead`);\n    }\n    const message = cls.fromObject(arg);\n    return cls.encode(message).finish();\n  };\n}\nfunction mapMethodOptions(options) {\n  return (options || []).reduce((obj, item) => {\n    for (const [key, value] of Object.entries(item)) {\n      switch (key) {\n        case 'uninterpreted_option':\n          obj.uninterpreted_option.push(item.uninterpreted_option);\n          break;\n        default:\n          obj[key] = value;\n      }\n    }\n    return obj;\n  }, {\n    deprecated: false,\n    idempotency_level: IdempotencyLevel.IDEMPOTENCY_UNKNOWN,\n    uninterpreted_option: []\n  });\n}\nfunction createMethodDefinition(method, serviceName, options, fileDescriptors) {\n  /* This is only ever called after the corresponding root.resolveAll(), so we\n   * can assume that the resolved request and response types are non-null */\n  const requestType = method.resolvedRequestType;\n  const responseType = method.resolvedResponseType;\n  return {\n    path: '/' + serviceName + '/' + method.name,\n    requestStream: !!method.requestStream,\n    responseStream: !!method.responseStream,\n    requestSerialize: createSerializer(requestType),\n    requestDeserialize: createDeserializer(requestType, options),\n    responseSerialize: createSerializer(responseType),\n    responseDeserialize: createDeserializer(responseType, options),\n    // TODO(murgatroid99): Find a better way to handle this\n    originalName: camelCase(method.name),\n    requestType: createMessageDefinition(requestType, fileDescriptors),\n    responseType: createMessageDefinition(responseType, fileDescriptors),\n    options: mapMethodOptions(method.parsedOptions)\n  };\n}\nfunction createServiceDefinition(service, name, options, fileDescriptors) {\n  const def = {};\n  for (const method of service.methodsArray) {\n    def[method.name] = createMethodDefinition(method, name, options, fileDescriptors);\n  }\n  return def;\n}\nfunction createMessageDefinition(message, fileDescriptors) {\n  const messageDescriptor = message.toDescriptor('proto3');\n  return {\n    format: 'Protocol Buffer 3 DescriptorProto',\n    type: messageDescriptor.$type.toObject(messageDescriptor, descriptorOptions),\n    fileDescriptorProtos: fileDescriptors\n  };\n}\nfunction createEnumDefinition(enumType, fileDescriptors) {\n  const enumDescriptor = enumType.toDescriptor('proto3');\n  return {\n    format: 'Protocol Buffer 3 EnumDescriptorProto',\n    type: enumDescriptor.$type.toObject(enumDescriptor, descriptorOptions),\n    fileDescriptorProtos: fileDescriptors\n  };\n}\n/**\n * function createDefinition(obj: Protobuf.Service, name: string, options:\n * Options): ServiceDefinition; function createDefinition(obj: Protobuf.Type,\n * name: string, options: Options): MessageTypeDefinition; function\n * createDefinition(obj: Protobuf.Enum, name: string, options: Options):\n * EnumTypeDefinition;\n */\nfunction createDefinition(obj, name, options, fileDescriptors) {\n  if (obj instanceof Protobuf.Service) {\n    return createServiceDefinition(obj, name, options, fileDescriptors);\n  } else if (obj instanceof Protobuf.Type) {\n    return createMessageDefinition(obj, fileDescriptors);\n  } else if (obj instanceof Protobuf.Enum) {\n    return createEnumDefinition(obj, fileDescriptors);\n  } else {\n    throw new Error('Type mismatch in reflection object handling');\n  }\n}\nfunction createPackageDefinition(root, options) {\n  const def = {};\n  root.resolveAll();\n  const descriptorList = root.toDescriptor('proto3').file;\n  const bufferList = descriptorList.map(value => Buffer.from(descriptor.FileDescriptorProto.encode(value).finish()));\n  for (const [name, obj] of getAllHandledReflectionObjects(root, '')) {\n    def[name] = createDefinition(obj, name, options, bufferList);\n  }\n  return def;\n}\nfunction createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options) {\n  options = options || {};\n  const root = Protobuf.Root.fromDescriptor(decodedDescriptorSet);\n  root.resolveAll();\n  return createPackageDefinition(root, options);\n}\n/**\n * Load a .proto file with the specified options.\n * @param filename One or multiple file paths to load. Can be an absolute path\n *     or relative to an include path.\n * @param options.keepCase Preserve field names. The default is to change them\n *     to camel case.\n * @param options.longs The type that should be used to represent `long` values.\n *     Valid options are `Number` and `String`. Defaults to a `Long` object type\n *     from a library.\n * @param options.enums The type that should be used to represent `enum` values.\n *     The only valid option is `String`. Defaults to the numeric value.\n * @param options.bytes The type that should be used to represent `bytes`\n *     values. Valid options are `Array` and `String`. The default is to use\n *     `Buffer`.\n * @param options.defaults Set default values on output objects. Defaults to\n *     `false`.\n * @param options.arrays Set empty arrays for missing array values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.objects Set empty objects for missing object values even if\n *     `defaults` is `false`. Defaults to `false`.\n * @param options.oneofs Set virtual oneof properties to the present field's\n *     name\n * @param options.json Represent Infinity and NaN as strings in float fields,\n *     and automatically decode google.protobuf.Any values.\n * @param options.includeDirs Paths to search for imported `.proto` files.\n */\nfunction load(filename, options) {\n  return (0, util_1.loadProtosWithOptions)(filename, options).then(loadedRoot => {\n    return createPackageDefinition(loadedRoot, options);\n  });\n}\nexports.load = load;\nfunction loadSync(filename, options) {\n  const loadedRoot = (0, util_1.loadProtosWithOptionsSync)(filename, options);\n  return createPackageDefinition(loadedRoot, options);\n}\nexports.loadSync = loadSync;\nfunction fromJSON(json, options) {\n  options = options || {};\n  const loadedRoot = Protobuf.Root.fromJSON(json);\n  loadedRoot.resolveAll();\n  return createPackageDefinition(loadedRoot, options);\n}\nexports.fromJSON = fromJSON;\nfunction loadFileDescriptorSetFromBuffer(descriptorSet, options) {\n  const decodedDescriptorSet = descriptor.FileDescriptorSet.decode(descriptorSet);\n  return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);\n}\nexports.loadFileDescriptorSetFromBuffer = loadFileDescriptorSetFromBuffer;\nfunction loadFileDescriptorSetFromObject(descriptorSet, options) {\n  const decodedDescriptorSet = descriptor.FileDescriptorSet.fromObject(descriptorSet);\n  return createPackageDefinitionFromDescriptorSet(decodedDescriptorSet, options);\n}\nexports.loadFileDescriptorSetFromObject = loadFileDescriptorSetFromObject;\n(0, util_1.addCommonProtos)();","map":{"version":3,"names":["camelCase","require","Protobuf","descriptor","util_1","Long","exports","isAnyExtension","obj","IdempotencyLevel","descriptorOptions","longs","String","enums","bytes","defaults","oneofs","json","joinName","baseName","name","isHandledReflectionObject","Service","Type","Enum","isNamespaceBase","Namespace","Root","getAllHandledReflectionObjects","parentName","objName","nested","Object","keys","map","reduce","accumulator","currentValue","concat","createDeserializer","cls","options","deserialize","argBuf","toObject","decode","createSerializer","serialize","arg","Array","isArray","Error","message","fromObject","encode","finish","mapMethodOptions","item","key","value","entries","uninterpreted_option","push","deprecated","idempotency_level","IDEMPOTENCY_UNKNOWN","createMethodDefinition","method","serviceName","fileDescriptors","requestType","resolvedRequestType","responseType","resolvedResponseType","path","requestStream","responseStream","requestSerialize","requestDeserialize","responseSerialize","responseDeserialize","originalName","createMessageDefinition","parsedOptions","createServiceDefinition","service","def","methodsArray","messageDescriptor","toDescriptor","format","type","$type","fileDescriptorProtos","createEnumDefinition","enumType","enumDescriptor","createDefinition","createPackageDefinition","root","resolveAll","descriptorList","file","bufferList","Buffer","from","FileDescriptorProto","createPackageDefinitionFromDescriptorSet","decodedDescriptorSet","fromDescriptor","load","filename","loadProtosWithOptions","then","loadedRoot","loadSync","loadProtosWithOptionsSync","fromJSON","loadFileDescriptorSetFromBuffer","descriptorSet","FileDescriptorSet","loadFileDescriptorSetFromObject","addCommonProtos"],"sources":["../../src/index.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}